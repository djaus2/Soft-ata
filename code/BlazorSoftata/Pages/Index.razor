@page "/"
@page "/index"


@using Softata;
@using Softata.Enums
@inject AppState AppState
@inject NavigationManager navigationManager
@using BlazorPro.Spinkit


<PageTitle>Softata</PageTitle>
<h1>Softata</h1>
<i><b>Softata:</b> A Firmata like C# library connecting to a RPi Pico W running Arduino.</i>
<p>For details <a href="https://davidjones.sportronics.com.au/cats/softata/">see here</a></p>
@if (!string.IsNullOrEmpty(AppState.AppVersion))
{
    <tr>
        <td><b>App Version: </b></td>
        <td>@AppState.AppVersion</td>
    </tr>
}
@if (!string.IsNullOrEmpty(AppState.Connected))
{
    <tr>
        <td><b>Connected: </b></td>
        <td>@AppState.Connected</td>
    </tr>
}
@if (!string.IsNullOrEmpty(AppState.DevicesCSV))
{
    <tr>
        <td><b>Device Types: </b></td>
        <td>@AppState.DevicesCSV.Replace("DEVICES:", "")</td>
    </tr>
}
@if (!(AppState.TestCategory == DeviceCategory.MaxType))
{
    <tr>
        <td><b>Selected Test Category: </b></td>
        <td>@TestCategory</td>
    </tr>
}
@if (!(AppState.TestType == BlazorTestType.MaxType))
{
    <tr>
        <td><b>Selected Test Type: </b></td>
        <td>@AppState.TestType</td>
    </tr>
}
@if ((AppState.IDisplay != 0xff)) 
{
    <tr>
        <td><b>Selected Display: </b></td>
        <td>@AppState.DisplayDevice</td>
    </tr>
}
else @if ((AppState.ISensor != 0xff))
{
    <tr>
        <td><b>Selected Sensor: </b></td>
        <td>@AppState.SensorDevice</td>
    </tr>
}

<hr />

@if (Busy)
{
    <Pulse />
    <p>Please wait ...</p>
}

@if (!AppState.Running)
{
    @if (AppState.UsingGroveShield == null)
    {
        <h2>Start</h2>
        <table>
            <tr>
                <td>Select Pico Context:</td>
                <td>
                    <select @bind=@AppState.StrUsingGroveShield>
                        <option value="null">Select</option>
                        <option value="true">Grove Shield</option>
                        <option value="false">Default Pico</option>
                    </select>
                </td>
            </tr>

        </table>
        <br/>
        <p><b>Comment:</b> The Grove Shield connections are limited. If selected then  
            for tests this is enforced for pin selection.</p>

    }
    else if (string.IsNullOrEmpty(AppState.Connected))
    {
        <h2>Start</h2>  
        <table>
            <tr>
                <td>IP Address:</td>
                <td><input type="text" @bind-value="@ipaddressStr" /></td>
            </tr>
            <tr>
                <td>Port:</td>
                <td><input type="text" value="@port" /></td>
            </tr>
            <tr><td colspan="2">Wait until Inbuilt LED flashes slowly.</td></tr>
            <tr><td><button class="btn btn-primary" @onclick="Connect">Connect</button></td></tr>
        </table>
    }
    else if (AppState.TestCategory == DeviceCategory.MaxType)
    {
        <div class="form-group">
            @if (AppState.TestCategory!= DeviceCategory.MaxType)
            {
                <h4>Test Category: @AppState.TestCategory</h4>
            }
            else
            {
                <h4>Test Category:</h4> 
            }
            <select @onchange="OnChangeDeviceType">
                <option value="None">Select Test Category</option>
                @foreach (var value in Enum.GetValues<DeviceCategory>().Where(value=>value<DeviceCategory.MaxType))
                {
                    <option value="@value">@value</option>
                }
            </select>
        </div>
    }
    else if (AppState.TestType == BlazorTestType.MaxType)
    {
        <h3>@TestCategory</h3>
        <button class="btn btn-primary" @onclick="Reset">Reset</button>
        @switch(@AppState.TestCategory)
        {
            case DeviceCategory.digital:
            case DeviceCategory.analog:
            case DeviceCategory.actuator:
            case DeviceCategory.serial:
            @if(CurrentTypes != null)
                {
                    <div class="form-group">
                        @if (AppState.TestType != BlazorTestType.MaxType)
                        {
                            <h4>Tests: @AppState.TestType </h4>
                        }
                        else
                        {
                            <h4>Tests:</h4>
                        }
                        <select @onchange="OnChangeBlazorTestType">
                            <option value="None">Select test</option>
                            @foreach (var value in CurrentTypes)
                            {
                                <option value="@value">@value</option>
                            }
                        </select>
                    </div>
                }
                break;
            case DeviceCategory.display:
                <div class="form-group">
                    <h4>Display Tests</h4>
                    <table>
                        <tr><td colspan="4">Run an exemplar sequence of tests demonstrating .NET interaction with the Display.</td></tr>
                        <tr>
                            <td colspan="4">
                                <select @onchange="OnChangeBlazorTestType">
                                    <option value=0xff>Select Display</option>
                                    @for (int i = 0; i < ListDeviceTypeTests.Count(); i++)
                                    {
                                        <option value=@i>@ListDeviceTypeTests[i]</option>
                                    }
                                </select>
                            </td>
                        </tr>
                    </table>
                    <br/>
                </div>
                break;
            case DeviceCategory.sensor:
                <div>
                    <h4>Select</h4>
                        <select @onchange="OnChangeBlazorTestType">
                        <option value=0xff>Select Sensor</option>
                        @for (int i = 0; i < ListDeviceTypeTests.Count(); i++)
                        {
                            <option value=@i>@ListDeviceTypeTests[i]</option>
                        }
                    </select>
                </div>
                break;
        }
    }
    else if (!AppState.ReadytoRun)
    {
        <button class="btn btn-primary" @onclick="Reset">Reset</button>
        <div class="form-group">
            @switch (AppState.TestType)
           {
                case Softata.Enums.BlazorTestType.Sensors:
                    {
                        <table>
                            <tr><td colspan="4">Run an exemplar sequence of tests demonstrating .NET interaction with the Sensor.</td></tr>
                            <tr colspan="4"><td>Use defaults for now.</td></tr>
                        <tr><td colspan="4"><button class="btn btn-primary" @onclick="SensorsDefaults">Use Defaults</button></td></tr>
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Displays:
                    {
                        <h4>Display Connection for @AppState.Displays[AppState.IDisplay]</h4>
                        <table>
                            <tr><td colspan="2">Run an exemplar sequence of tests demonstrating .NET interaction with the Display.</td></tr>
                            @if ( DisplayDevice.NEOPIXEL == (DisplayDevice)AppState.IDisplay)
                            {
                                @if (@AppState.DisplayPin != 0xff)
                                {

                                    <tr>
                                        <td>
                                            <button class="btn btn-primary" @onclick="Ready">Use this:</button>&nbsp;
                                    <b>GPIO Pin:</b>@AppState.DisplayPin</td><td>&nbsp;</td></tr>
                                }
                                <tr>
                                     <td><b>Select GPIO Pin Connection:</b>&nbsp;  
                                         <select @bind=@AppState.DisplayPin>
                                            <option value=0xff>Select</option>
                                            @foreach (var value in AppState.GPIOPins)
                                            {             
                                                <option value=@value>@value</option>
                                            }
                                        </select>
                                    </td>
                                    <td>&nbsp;</td>
                                </tr>
                                <tr>
                                    <td ><button class="btn btn-primary" @onclick="DisplaysDefaults">Or Use Defaults</button></td>
                                    <td>&nbsp;</td>
                                </tr>
                            }
                            else
                            {
                            <tr colspan="4"><td>Use defaults</td></tr>
                            <tr><td colspan="4"><button class="btn btn-primary" @onclick="DisplaysDefaults">Use Defaults</button></td></tr>
                            }
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Loopback:
                    {
                        <table>
                            <tr><td colspan="3">Select Connections</td></tr>
                            <tr><td>Serial Tx</td><td>&nbsp;</td><td>Serial Rx</td></tr>
                             <tr>
                                <td>
                                    <select @bind=@AppState.SerialTx>
                                        <option value=null>Select</option>
                                        <option value=1>Serial 1 Tx</option>
                                        <option value=2>Serial 2 Tx</option>
                                    </select>
                                </td>
                                <td>&nbsp;</td>
                                <td>
                                     <select @bind=@AppState.SerialRx>
                                        <option value=null>Select</option>
                                        <option value=1>Serial 1 Rx</option>
                                        <option value=2>Serial 2 Rx</option>
                                    </select>
                                </td>
                            </tr> 
                        </table>
                    } 
                    break;
                case Softata.Enums.BlazorTestType.GPS_Serial:
                    {
                        <table>
                            <tr><td>Serial: Select Port</td></tr>
                            <tr>
                                <td>
                                    <select @bind=@AppState.SerialTx>
                                        <option value=null>Select Port</option>
                                        <option value=1>Serial 1</option>
                                        <option value=2>Serial 2</option>
                                    </select>
                                </td>
                            </tr>
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Potentiometer_Actuator:
                    {
                        @if (!AppState.GetPins)
                        {
                            <h4>Actuators</h4>
                            <p>
                                Select an Actuator from the list. <i>There may be only one.</i><br /> .
                            </p>
                            <h4>Actuators:</h4>
                            <select @bind=@AppState.IActuator>
                                <option value=0xff>Select</option>
                                @for (int i=0;i< AppState.Actuators.Count();i++)
                                {
                                    <option value=@i>@AppState.Actuators[i]</option>
                                }
                            </select>
                        }
                        else
                        {
                            @* //Need a specific entry here for each Actuator *@
                            @if (AppState.IActuator == 0)
                            {
                                <h4>Potentiometer-Servo Test</h4>
                                <p>
                                    This tests the tracking of a Servo to a Potentiometer.<br />
                                    Runs the test as per the Console app without user web page interaction<br /> .
                                </p>
                                <table>
                                    <tr><td colspan="3"><button class="btn btn-primary" @onclick="ServoDefaults">Use Defaults</button></td></tr>
                                    <tr><td>Potentiometer Pin</td><td>&nbsp;</td><td>Servo Pin</td></tr>
                                    <tr>
                                        <td>
                                            <select @bind=@AppState.Potentiometer>
                                                <option value=null>Select</option>
                                                <option value=26>A0</option>
                                                <option value=27>A1</option>
                                                <option value=28>A2</option>
                                            </select>
                                        </td>
                                        <td>&nbsp;</td>
                                        <td>
                                            <select @bind=@AppState.ServoPin>
                                                @foreach (var value in AppState.GPIOPins)
                                                {
                                                    <option value=@value>@value</option>
                                                }
                                            </select>
                                </td>
                            </tr>
                        </table>
                            }
                        }
                    }
                    break;
                case Softata.Enums.BlazorTestType.Analog_Potentiometer_Light_and_Sound:
                    {
                        <h4>Analog Potentiometer-Light-Sound Test</h4>
                        <p>2Do
                        </p>
                        <table>
                            <tr><td>Pot Pin</td><td>&nbsp;</td><td>Light Pin</td><td>&nbsp;</td><td>Sound Pin</td></tr>
                            <tr><td colspan="4"><button class="btn btn-primary" @onclick="PotLightSoundDefaults">Use Defaults</button></td></tr>

                            <tr>
                                <td>
                                    <select @bind=@AppState.Potentiometer>
                                        <option value=null>Select</option>
                                        <option value=26>A0</option>
                                        <option value=27>A1</option>
                                        <option value=28>A2</option>
                                    </select>
                                </td>
                                <td>&nbsp;</td>
                                <td>
                                    <select @bind=@AppState.LightSensor>
                                        <option value=null>Select</option>
                                        <option value=27>A1</option>
                                        <option value=28>A2</option>
                                        <option value=26>A0</option>
                                    </select>
                                </td>
                                <td>&nbsp;</td>
                                <td>
                                    <select @bind=@AppState.SoundSensor>
                                        <option value=null>Select</option>
                                        <option value=28>A2</option>
                                        <option value=26>A0</option>
                                        <option value=27>A1</option>
                                    </select>
                                </td>
                            </tr>
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Potentiometer_Relay:
                    {
                        <h4>Potentiometer-Relay Test</h4>
                        <p>
                            This tests the Analog input(potentiometer) and that triggers a relay RPi Pico W.
                            <br />
                            Runs the test as per the Console app without user web page interaction.
                            <br />
                            The analog value is read on the Pico passed back to this app,
                            <br />
                            if greater than 50% the state is true, false otherwise.
                            <br />
                            If the state has changed then sent back to Pico a dital signal to the Relay..
                            <br />
                            UI Lights show when certain threshholds are reached.
                            <br />
                            <i>Set to run for 60s (2 readings ps)</i>
                        </p>
                        <table>
                            <tr><td>Potentiometer Pin</td><td>&nbsp;</td><td>Relay Pin</td></tr>
                            <tr><td colspan="3"><button class="btn btn-primary" @onclick="PotRelayDefaults">Use Defaults</button></td></tr>

                            <tr>
                                <td>
                                    <select @bind=@AppState.Potentiometer>
                                        <option value=null>Select</option>
                                        <option value=26>A0</option>
                                        <option value=27>A1</option>
                                        <option value=28>A2</option>
                                    </select>
                                </td>
                                <td>&nbsp;</td>
                                <td>
                                    <select @bind=@AppState.Relay>
                                        @foreach (var value in AppState.GPIOPins)
                                        {
                                            <option value=@value>@value</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.PWM:
                case Softata.Enums.BlazorTestType.Analog_Potentiometer_and__LED:
                    {
                        <h4>Potentiometer-LED Test</h4>
                        <p>
                            This tests the Analog input (potentiometer) and PWM output to an LED with the  RPi Pico W.<br />
                            Runs the test as per the Console app without user web page interaction.<br />
                            The analog value is read on the Pico passed back to this app,<br />
                            processed then sent back to Pico as a PWM value for the LED. <br />
                            UI Lights show when certain threshholds are reached.<br />
                            <i>Set to run for 60s (2 readings ps)</i>
                        </p>
                        <table>
                            <tr><td>Potentiometer Pin</td><td>&nbsp;</td><td>LED Pin</td></tr>
                            <tr><td colspan="3"><button class="btn btn-primary" @onclick="PotLEDDefaults">Use Defaults</button></td></tr>
                            <tr>
                                <td>
                                    <select @bind=@AppState.Potentiometer>
                                        <option value=null>Select</option>
                                        <option value=26>A0</option>
                                        <option value=27>A1</option>
                                        <option value=28>A2</option>
                                    </select>
                                </td>
                                <td>&nbsp;</td>
                                <td>
                                    <select @bind=@AppState.LED>
                                        @foreach (var value in AppState.GPIOPins)
                                        {
                                            <option value=@value>@value</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        </table>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Digital_Button_and_LED:
                {
                    <h4>Digital Button-LED Test </h4>
                        <p>
                            This tests the digital input and output pins of the RPi Pico W with a Button and LED.<br />
                            Runs the digital test as per the Console app without user web page interaction<br /> but requires a button press to toggle the LED.
                        </p>
                    <table>
                            <tr><td colspan="3">Select pins:</td></tr>
                            <tr><td>Button Pin</td><td>&nbsp;</td><td>LED Pin</td></tr>
                        <tr>
                            <td>
                                <select @bind=@AppState.Button>
                                    @foreach (var value in AppState.GPIOPins)
                                    {
                                        <option value=@value>@value</option>
                                    }
                                </select>
                            </td>
                            <td>&nbsp;</td>
                            <td>
                                <select @bind=@AppState.LED>
                                        @foreach (var value in AppState.GPIOPins)
                                    {
                                        <option value=@value>@value</option>
                                    }
                                </select>
                            </td>
                        </tr>
                        <tr><td colspan="3">&nbsp;</td></tr>
                        <tr><td colspan="3"><button class="btn btn-primary" @onclick="LEDButtonDefaults">Use Defaults</button></td></tr>
                    </table> 
                }
                break;
            }
            <br />
            @switch (AppState.TestType)
            {
                case BlazorTestType.Loopback:
                    @if ((@AppState.SerialRx == 1) || (@AppState.SerialRx == 2))
                    {
                        @if ((@AppState.SerialTx == 1) || (@AppState.SerialTx == 2))
                        {
                            <button class="btn btn-primary" @onclick="Ready">Test is configured</button>
                        }
                    }
                    break;
                case BlazorTestType.GPS_Serial:
                    @if ((@AppState.SerialTx == 1) || (@AppState.SerialTx == 2))
                    {
                        <button class="btn btn-primary" @onclick="Ready">Test is configured</button>
                    }
                    break;
                case BlazorTestType.Sensors:
                case BlazorTestType.Displays:
                // Only used defaults for now
                    break;
                default:
                    <button class="btn btn-primary" @onclick="Ready">Test is configured</button>
                    break;
            }
        </div>
    }
    else if (AppState.ReadytoRun)
    {
        <button class="btn btn-primary" @onclick="Reset">Reset</button>
        <div class="form-group">
            @switch (AppState.TestType)
            {
                case Softata.Enums.BlazorTestType.Sensors:
                    {
                        <h4>Sensor Test</h4>
                        <p>
                            Run an exemplar sequence of tests demonstrating .NET interaction with the Sensor.
                        </p>
                        <p>Using Default pins for device</p>
                        <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Displays:
                    {
                        <h4>Display Test</h4>
                        <p>
                            Run an exemplar sequence of tests demonstrating .NET interaction with the Display.
                        </p>
                        @if (@AppState.DisplayPin != 0xff)
                        {

                            <tr>
                                <td>
                                    <b>GPIO Pin:</b>@AppState.DisplayPin
                                </td>
                                <td>&nbsp;</td>
                            </tr>
                        }
                        else
                        {
                            <p>Using Default pins for device</p>
                        }
                        <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Loopback:
                    {
                       <h4>Serial Test</h4>
                       <p>Serial Tx: Serial @AppState.SerialTx</p>
                       <p>Serial Rx: Serial @AppState.SerialRx</p>
                        <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    }
                    break;
                case Softata.Enums.BlazorTestType.GPS_Serial:
                    {
                        <h4>GPS Test</h4>
                        @if (@AppState.SerialTx==1)
                        {
                            <p>Serial Port: Serial1"</p>
                        }
                        else if (@AppState.SerialTx == 2)
                        {
                            <p>Serial Port: Serial2"</p>
                        }
                        <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    }
                    break;
                case Softata.Enums.BlazorTestType.Analog_Potentiometer_Light_and_Sound:
                    {
                        <h4>Potentiometer-LED Test</h4>
                        <p>
                            2Do.
                        </p>
                        <p>Potentiometer Pin: @AppState.Potentiometer</p>
                        <p>Light Sensor Pin: @AppState.LightSensor </p>
                        <p>Sound Sensor Pin: @AppState.SoundSensor </p>
                    }
                    <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    break;
                case Softata.Enums.BlazorTestType.Potentiometer_Actuator:
                    {
                        @* //One entry needed here for each actuator *@
                        @if (AppState.IActuator == 0)
                        {
                            <h4>Potentiometer-Servo Test</h4>
                            <p>
                                This tests the tracking of a Servo to a Potentiometer.<br />
                                Runs the test as per the Console app without user web page interaction<br /> .
                            </p>
                            <table>
                                <tr><td>Potentiometer Pin</td><td>&nbsp;</td><td>Servo Pin</td></tr>
                                <tr>
                                    <td>
                                        @AppState.Potentiometer
                                    </td>
                                    <td>&nbsp;</td>
                                    <td>
                                        @AppState.ServoPin
                                    </td>
                                </tr>
                            </table>
                        }
                    }
                    <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    break;
                case Softata.Enums.BlazorTestType.Potentiometer_Relay:
                    {
                        <h4>Potentiometer-Relay Test</h4>
                        <p>
                            This tests the Analog input(potentiometer) and that triggers a relay RPi Pico W.
                            <br />
                            Runs the test as per the Console app without user web page interaction.
                            <br />
                            The analog value is read on the Pico passed back to this app,
                            <br />
                            if greater than 50% the state is true, false otherwise.
                            <br />
                            If the state has changed then sent back to Pico a dital signal to the Relay..
                            <br />
                            UI Lights show when certain threshholds are reached.
                            <br />
                            <i>Set to run for 60s (2 readings ps)</i>
                        </p>
                        <p>Potentiometer Pin: @AppState.Potentiometer</p>
                        <p>Relay Pin: @AppState.Relay </p>
                        <button class="btn btn-primary" @onclick="Start">Go to test</button>
                    }
                    break;
                case BlazorTestType.Analog_Potentiometer_and__LED:
                case BlazorTestType.PWM:
                    {
                        <h4>Potentiometer-LED Test</h4>
    <p>This tests the Analog input(potentiometer) and PWM output to an LED with the  RPi Pico W.
    <br />
    Runs the test as per the Console app without user web page interaction.
    <br />
    The analog value is read on the Pico passed back to this app,
    <br />
    processed then sent back to Pico as a PWM value for the LED.
    <br />
    UI Lights show when certain threshholds are reached.</p>
                        <p>Potentiometer Pin: @AppState.Potentiometer</p>
                        <p>LED Pin: @AppState.LED </p>
                    }
                    <button class="btn btn-primary" @onclick="Start">Go to test</button>

                    break;
                    case BlazorTestType.Digital_Button_and_LED.:
                    {
                        <h4>Digital Button-LED Test </h4>
                        <p>
                            This tests the digital input and output pins of the RPi Pico W with a Button and LED.<br />
                            Runs the digital test as per the Console app without user web page interaction<br /> but requires a button press to toggle the LED.
                        </p>
                        <p>Button Pin: @AppState.Button</p>
                        <p>LED Pin: @AppState.LED </p>
                    }
                    <button class="btn btn-primary" @onclick="Start">Go to test</button>

                    break;
            }
        </div>      
    }

}





@code {
    // Set the same as Arduino: Boot Pico as view settings in terminal
    int port { get; set; } = 4242;
    string ipaddressStr {get; set;} = "192.168.0.9";

    bool busy = false;
    bool Busy
    {
        get => busy;
        set { busy = value; StateHasChanged(); }
    }

    List<BlazorTestType> CurrentTypes { get; set; } = new List<BlazorTestType>();
    List<string> ListDeviceTypeTests { get; set; } = new List<string>();
    string TestCategory = "";

    public async Task Connect()
    {
        Busy = true;
        StateHasChanged();
        await Task.Delay(333);
        SoftataLib.Connect(ipaddressStr, port);
        AppState.Connected = "Connected";
        await Task.Delay(333);
        SoftataLib.SendMessageCmd("Begin");
        await Task.Delay(333);
        AppState.AppVersion = SoftataLib.SendMessageCmd("Version");
        Console.WriteLine($"Softata Version: {AppState.AppVersion}");
        await Task.Delay(333);
        AppState.DevicesCSV = SoftataLib.SendMessageCmd("Devices");
        Console.WriteLine($"{AppState.DevicesCSV}");
        await Task.Delay(333);
        Busy = false;
        StateHasChanged();
        AppState.Connected = "IsConnected";
        AppState.TestCategory = DeviceCategory.MaxType;
        await Task.Delay(333);
    }

    private void Reset()
    {
        AppState.TestCategory = DeviceCategory.MaxType;
        AppState.ReadytoRun = false;
        AppState.Running = false;
        AppState.TestType = BlazorTestType.MaxType;
        /*AppState.IDigital = 0xff;
        AppState.IDisplay = 0xff;
        AppState.IAnalog = 0xff;
        AppState.IActuator = 0xff;
        AppState.ISensor = 0xff;*/
    }




   

    private void OnChangeDeviceType(ChangeEventArgs e)
    {
        if (e == null)
            return;
        var selected = e.Value?.ToString();
        if (selected != null)
        {
            string _TestCategory = selected;
            if (Enum.TryParse(_TestCategory, out DeviceCategory _testType))
            {
                List<byte> acts = new List<byte>();
                AppState.TestCategory = _testType;
                TestCategory = _TestCategory.Substring(0,1).ToUpper() + _TestCategory.Substring(1);
                switch (AppState.TestCategory)
                {
                    case DeviceCategory.digital:
                        acts = SoftataLib.DeviceCategoryMembers[DeviceCategory.digital];
                        AppState.LDigitals = (from a in acts select (BlazorTestType)a).ToList<BlazorTestType>();
                        CurrentTypes = AppState.LDigitals;
                        AppState.IDigital = 0xff;
                        break;
                    case DeviceCategory.serial:
                        acts = SoftataLib.DeviceCategoryMembers[DeviceCategory.serial];
                        AppState.LSerial = (from a in acts select (BlazorTestType)a).ToList<BlazorTestType>();
                        CurrentTypes = AppState.LSerial;
                        AppState.ISerial = 0xff;
                        break;
                    case DeviceCategory.analog:
                        acts = SoftataLib.DeviceCategoryMembers[DeviceCategory.analog];
                        AppState.LAnalogs = (from a in acts select (BlazorTestType)a).ToList<BlazorTestType>();
                        CurrentTypes =AppState.LAnalogs;
                        AppState.IAnalog = 0xff;
                        break;
                    case DeviceCategory.sensor:
                        AppState.Sensors = SoftataLib.Sensor.GetSensors().ToList();
                        ListDeviceTypeTests = AppState.Sensors;
                        AppState.ISensor = 0xff;
                        break;
                    case DeviceCategory.display:
                        AppState.Displays = SoftataLib.Display.GetDisplays().ToList();
                        ListDeviceTypeTests = AppState.Displays;
                        AppState.IDisplay = 0xff;
                        break;
                    case DeviceCategory.actuator:
                        acts =  SoftataLib.DeviceCategoryMembers[DeviceCategory.actuator];
                        AppState.Actuators = SoftataLib.Actuator.GetActuators().ToList();
                        AppState.LActuators = (from a in acts select (BlazorTestType)a).ToList<BlazorTestType>();
                        AppState.Actuators.AddRange(from a in AppState.LActuators select a.ToString());
                        CurrentTypes = AppState.LActuators;
                        AppState.IActuator = 0xff;
                        break;
                }
            }
            StateHasChanged();
        }
    }

    private void OnChangeBlazorTestType(ChangeEventArgs e)
    {
        if (e == null)
            return;
        var selected = e.Value.ToString();
        if (!string.IsNullOrEmpty(selected ))
        {
            if ((AppState.TestCategory != DeviceCategory.display) &&
            (AppState.TestCategory != DeviceCategory.sensor))
            {
                string TestType = selected;
                if (Enum.TryParse(TestType, out BlazorTestType _testType))
                {
                    AppState.TestType = _testType;
                    switch (AppState.TestType)
                    {
                        case BlazorTestType.Loopback:
                        case BlazorTestType.GPS_Serial:
                        //AppState = new DigitalButtonLED();
                            break;
                        case BlazorTestType.Digital_Button_and_LED:
            //AppState = new DigitalButtonLED();
                            break;
                        case BlazorTestType.Potentiometer_Servo:
                            AppState.Actuators = SoftataLib.Actuator.GetActuators().ToList();
                            AppState.GetPins = true;
                            AppState.IActuator = 0;
                            break;
                    }
                }
            }
            else
            {
                // Get subcommand
                switch (AppState.TestCategory)
                {
                    case DeviceCategory.display:
                        AppState.TestType = BlazorTestType.Displays;
                        string DisplayType = selected;
                        if (byte.TryParse(DisplayType, out byte idisplay))
                        {
                            AppState.IDisplay = idisplay;
                        }
                        break;
                    case DeviceCategory.sensor:
                        AppState.TestType = BlazorTestType.Sensors;
                        string SensorType = selected;
                        if (byte.TryParse(SensorType, out byte iSensor))
                        {
                            AppState.ISensor = iSensor;
                        }
                        break;
                }
            }
            StateHasChanged();
        }
    }


    public void Select()
    {
        var commandsArray = Enum.GetValues(typeof(BlazorTestType));

        // Convert the array to an IEnumerable<Colors>
        var commandsList = commandsArray.Cast<BlazorTestType>().ToList();
    }




    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.ReadytoRun = false;
        AppState.Running = false;
    }

    private void SensorsDefaults()
    {
@*         AppState.Potentiometer = 26;
        AppState.Servo = 16; *@
        AppState.DefaultSettings = true;
        Ready();
    }

    private void DisplaysDefaults()
    {
        @* AppState.Potentiometer = 26;
        AppState.Servo = 16; *@
        AppState.DefaultSettings = true;
        Ready();
    }

    private void PotRelayDefaults()
    {
        AppState.Potentiometer = 26;
        AppState.Relay = 16;
        Ready();
    }
    private void ServoDefaults()
    {
        AppState.Potentiometer = 26;
        AppState.ServoPin = 16;
        Ready();
    }

    private void PotLEDDefaults()
    {
        AppState.Potentiometer = 26;
        AppState.LED = 16;
        Ready();
    }

    private void LEDButtonDefaults()
    {
        AppState.Button = 26;
        AppState.LED = 18;
        Ready();
    }

    private void PotLightSoundDefaults()
    {
        AppState.Potentiometer = 26; //A0
        AppState.LightSensor = 27; //A1
        AppState.SoundSensor = 28; //A2
        Ready();
    }


    private void Ready()
    {
        AppState.ReadytoRun = false;
        switch (AppState.TestType)
        {
            case BlazorTestType.Sensors:
                break;
            case BlazorTestType.Displays:
                break;;
            case BlazorTestType.Pot_Actuator:
                if (!AppState.GPIOPins.Contains(AppState.ServoPin))
                    return;
                if (AppState.Potentiometer == AppState.ServoPin)
                    return;
                if ((AppState.Potentiometer == 26) && (AppState.ServoPin == 16))
                    AppState.DefaultSettings = true;
                else
                    AppState.DefaultSettings = false;
                break;
            case BlazorTestType.Loopback:
                break;
            case BlazorTestType.PotRelay:
                if (!AppState.GPIOPins.Contains(AppState.Relay))
                    return;
                if (AppState.Potentiometer == AppState.Relay)
                    return;
                if ((AppState.Potentiometer == 26) && (AppState.Relay == 16))
                    AppState.DefaultSettings = true;
                else
                    AppState.DefaultSettings = false;
                breAnalogPot_LED     case BlazorTestType.AnalogPotLED:
            case BlazorTestType.PWM:
                if (!AppState.GPIOPins.Contains(AppState.LED))
                    return;
                if (AppState.Potentiometer == AppState.LED)
                    return;
                Digital_Button_and_LED    case BlazorTestType.DigitalButtonLED:
                if (AppState == null)
                    return;
                if (!AppState.GPIOPins.Contains(AppState.Button))
                    return;
                if (!AppState.GPIOPins.Contains(AppState.LED))
                    return;
                if (AppState.Button == AppState.LED)
                    return;
                break;
            case BlazorTestType.Analog_Pototentiometer_Light_Sound:
                if (AppState.Potentiometer == AppState.LightSensor)
                    return;
                if (AppState.Potentiometer == AppState.SoundSensor)
                    return;
                if (AppState.SoundSensor == AppState.LightSensor)
                    return;
                break;
        }
        AppState.ReadytoRun = true;
        StateHasChanged();
    }

    private async Task Start()
    {
        switch (AppState.TestType)
        {
            case BlazorTestType.Sensors:
                switch((SensorDevice)AppState.ISensor)
                {
                    case SensorDevice.DHT11:
                        navigationManager.NavigateTo("/sensor_run");
                        break;
                    case SensorDevice.BME280:
                        navigationManager.NavigateTo("/sensor_run");
                        break;
                    case SensorDevice.UltrasonicRANGER:
                        navigationManager.NavigateTo("/sensor_run");
                        break;
                }
                break;
            case BlazorTestType.Displays:
                switch((DisplayDevice)AppState.IDisplay)
                {
                    case DisplayDevice.OLED096:
                        navigationManager.NavigateTo("/display_oled096");
                        break;
                    case DisplayDevice.LCD1602:
                        navigationManager.NavigateTo("/display_lcd1602");
                        break;
                    case DisplayDevice.NEOPIXEL:
                        navigationManager.NavigateTo("/display_neopixel");
                        break;

                }
                
                break; ;
            case BlazorTestType.Pot_Actuator:
                navigationManager.NavigateTo("/potservo");
                break;
            case CommandGPS_Serialback:
            case BlazorTestType.GPSSerial:
                navigationManager.NavigateTo("/serial");
                break;
            case BlazorTestType.PotRelay:
                navigationManager.NavigateTo("/potrelay");
                break;
            case BlazorTestType.Analog_Pototentiometer_Light_Sound:
                navigationManager.NavigateTo("/potlightsounAnalogPot_LED");
                break;
            case BlazorTestType.AnalogPotLED:
            case BlazorTestType.PWM:
                navigationManager.NavigateDigital_Button_and_LED                break;
            case BlazorTestType.DigitalButtonLED:
                navigationManager.NavigateTo("/digital");
                break;
        }

    }

}

