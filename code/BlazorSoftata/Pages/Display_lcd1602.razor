@page "/display_lcd1602"


@using Softata;
@using Softata.Enums

@inject AppState AppState
@using BlazorPro.Spinkit
@inject NavigationManager navigationManager

<PageTitle>@Title</PageTitle>
    <h1>@Title</h1>
<p>
    <i><b>Softata:</b> A Firmata like C# library connecting to a RPi Pico W running Arduino.</i>
</p>
<p>
    <i>Run an exemplar sequence of tests demonstrating .NET interaction with the Display.</i>
</p>
<hr/>
    Hardware: <a href="@DeviceHTMLLink">Grove - @displayName Sensor</a>
<hr/>
@if (Busy)
{
    <Pulse />
    <p>Please wait ...</p>
    <hr />
}
else if (AppState.Running)
{
    <Fold />
    <p>Running ...</p>
    <hr />
}

@if (!string.IsNullOrEmpty(AppState.AppVersion))
{
    <tr>
        <td><b>App Version: </b></td>
        <td>@AppState.AppVersion</td>
    </tr>
}
@if (!string.IsNullOrEmpty(AppState.Connected))
{
    <tr>
        <td><b>Connected: </b></td>
        <td>@AppState.Connected</td>
    </tr>
}
@if (!string.IsNullOrEmpty(AppState.DevicesCSV))
{
    <tr>
        <td><b>Device Types: </b></td>
        <td>@AppState.DevicesCSV.Replace("DEVICES:", "")</td>
    </tr>
}
@if (!(AppState.TestCategory == DeviceCategory.MaxType))
{
    <tr>
        <td><b>Selected Test Category: </b></td>
        <td>@AppState.TestCategory</td>
    </tr>
}
@if (!(AppState.TestType == BlazorTestType.MaxType))
{
    <tr>
        <td><b>Selected Test Type: </b></td>
        <td>@AppState.TestType</td>
    </tr>
}
@if ((AppState.IDisplay != 0xff))
{
    <tr>
        <td><b>Selected Display: </b></td>
        <td>@displayName</td>
    </tr>
}

<hr />



<hr />
<div class="form-group">
    
	 @if(RunMsg.Value!="")
	 {
	    <table>
	        @RunMsg
	    </table>
	 } 

</div>
<hr />

@if (AppState.ReadytoRun)
{
    @if (FailMsg.Value != "")
    {
        @FailMsg
        <hr/>
    }
    else
    {
        @if (OKMsg.Value != "")
        {
            @OKMsg
            <hr/>
        }
    }

    @if (!IsReady)
   { 
        <h2>Setup</h2>

        <font color="blue>"><h4>Pins: @pins</h4></font>
        <EditForm Model=@AppState>
            Test step period (mS): <InputNumber @bind-Value="AppState.TestStepPeriod" />
            <br/><br/>
            Delay after Clear period (mS): <InputNumber @bind-Value="AppState.TestClearPeriod" />
            <br/><br/>
            <button class="btn btn-primary" @onclick="Ready">Is Connected as per default</button>
        </EditForm>
    }
    else
    {
        @if (!AppState.Running)
        { 
            @if (ReconnectVisible)
            {
                <button  class="btn btn-primary" @onclick="Reconnect">Reconnect and run test</button>
            }
            else if (RunVisble)
            { 
                <br/>
                <button class="btn btn-primary" @onclick="Start">Run sequence of tests.</button>
            }
        }
        else
        {
            <div class="form-group">
	        <table>
                              
	        </table>
            </div>
            <br/>
            <br/>
            <button class="btn btn-primary" @onclick="Stop">Cancel</button>
        }
    }
    <br/><br/>
    @if (!AppState.Running)
    {
        <p>Nb: Cancel not working. Threading issues 2Do</p>
        <button class="btn btn-primary" @onclick="Reset">Restart app.</button>
    }

}





@code {
    DisplayDevice displayDevice { get; set; }
    byte deviceLinkedListIndex;
    string DeviceHTMLLink { get; set; } = "";
    string pins { get; set; } = "";
    MarkupString Title { get; set; } = new MarkupString($"Softata: Grove -  Display");
    MarkupString FailMsg { get; set; } = new MarkupString("");
    MarkupString OKMsg { get; set; } = new MarkupString("");
    MarkupString RunMsg { get; set; } = new MarkupString("");

    bool busy = false;
    bool Busy
    {
        get => busy;
        set { busy = value; StateHasChanged(); }
    }

    bool reconnectable = false;
    bool RunVisble { get; set; } = false;
    bool ReconnectVisible { get; set; } = false;
    bool IsReady = false;


    byte idisplay = 0;
    string displayName = "";
    string[] Displays = new string[0];

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        AppState.ReadytoRun = true; 
        AppState.Running = false;
        ReconnectVisible = false;
        RunVisble = true;
        IsReady = false;
        idisplay = AppState.IDisplay;
        displayName = "";
        Displays = SoftataLib.Display.GetDisplays();
        displayName = Displays[idisplay];
        displayDevice = (DisplayDevice)idisplay;
        DeviceHTMLLink = SoftataLib.Display.Links[displayDevice];
        Title = new MarkupString($"Softata: Grove - {displayName} Display");
        pins = Softata.SoftataLib.Display.GetPins(idisplay);
        StateHasChanged();
    }

    private async void Reconnect()
    {
        Busy = true;
        StateHasChanged();
        await Task.Delay(100);
        ReconnectVisible = false;
        SoftataLib.Reconnect();
        StateHasChanged();
        await Task.Delay(1000);
        Busy = false;
        StateHasChanged();
        await Task.Delay(100);
        await Start();
    }

    private async Task Start()
    {
        AppState.Running = true;
        RunVisble = false;
        Busy = true;
        StateHasChanged();
        await Task.Delay(333);

        RunMsg = new MarkupString("<h4>Exercising the {displayName} Display.</h4>");
        StateHasChanged();

        /////////////////////////// T E S T S /////////////////////////////
        SoftataLib.Display.Clear(deviceLinkedListIndex);
        Thread.Sleep(AppState.TestClearPeriod); 
        SoftataLib.Display.SetCursor(deviceLinkedListIndex, 0, 0);
        SoftataLib.Display.WriteString(deviceLinkedListIndex, "First Line");
        Thread.Sleep(AppState.TestStepPeriod);
        if (AppState.Running)
        {
            SoftataLib.Display.SetCursor(deviceLinkedListIndex, 0, 1);
            SoftataLib.Display.WriteString(deviceLinkedListIndex, "Wait");
            Thread.Sleep(AppState.TestStepPeriod);
            if (AppState.Running)
            {
                SoftataLib.Display.Clear(deviceLinkedListIndex);
                Thread.Sleep(AppState.TestClearPeriod);
                SoftataLib.Display.WriteString(deviceLinkedListIndex, 4, 0, "(4,0):Cursor");
                Thread.Sleep(AppState.TestStepPeriod);
                if (AppState.Running)
                {
                    SoftataLib.Display.WriteString(deviceLinkedListIndex, 2, 1, "(2,1):Write");
                    Thread.Sleep(AppState.TestStepPeriod);
                    if (AppState.Running)
                    {
                        SoftataLib.Display.Clear(deviceLinkedListIndex);
                        Thread.Sleep(AppState.TestClearPeriod);
                        SoftataLib.Display.SetCursor(deviceLinkedListIndex, 0, 0);

                        SoftataLib.Display.WriteString(deviceLinkedListIndex, "Time:");
                        int num = 10;
                        for (int i = 0; i < num; i++)
                        {
                            DateTime now = DateTime.Now;
                            string format = "HH:mm:ss";
                            string time = now.ToString(format);
                            string msg = $"{i + 1}/{num} {time}";
                            SoftataLib.Display.WriteString(deviceLinkedListIndex, 0, 1, msg);
                            Thread.Sleep(AppState.TestStepPeriod);
                        }
                    }
                }
            }
        }

        SoftataLib.Display.Clear(deviceLinkedListIndex);
        Thread.Sleep(AppState.TestClearPeriod);
        /////////////////////////// T E S T S /////////////////////////////
        
        RunMsg = new MarkupString("<h4>Done.</h4>");
        Busy = false;
        AppState.Running = false;
        RunVisble = true;
        StateHasChanged();
    }


    private async Task Reset()
    {
        Busy = true;
        RunMsg = new MarkupString("<h4>Resetting the Pico.. please wait</h4>");
        StateHasChanged();
        SoftataLib.SendMessageCmd("End");
        await Task.Delay(20000);
        RunMsg = new MarkupString("<h4>Pico should have reset by about now ...</h4><p>Pico should now slow blink</p>");
        StateHasChanged();
        AppState.OnChange -= StateHasChanged;
        AppState.ReadytoRun = false;
        AppState.Running = false;
        AppState.IDisplay = 0xff;
        AppState.Running = false;
        AppState.TestType = BlazorTestType.MaxType;
        AppState.TestCategory = DeviceCategory.MaxType;
        AppState.Connected = "";
        ReconnectVisible = false;
        await Task.Delay(3333);
        busy = false;
        StateHasChanged();
        navigationManager.NavigateTo("/");
    }

    private async Task Stop()
    {
        AppState.Running = false;
        StateHasChanged();
    }

    private void Ready(MouseEventArgs e)
    {
        deviceLinkedListIndex = (byte)SoftataLib.Display.SetupDefault(idisplay);
        if (deviceLinkedListIndex < 0)
        {
            FailMsg = new MarkupString($"<h3>Instantiated {displayName} not found</h3>");
            return;
        }
        else
        {
           OKMsg = new MarkupString($"Instantiated {displayName} linked at {deviceLinkedListIndex}");
        }
        IsReady = true;
        StateHasChanged();
    }
}

