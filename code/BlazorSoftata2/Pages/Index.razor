@page "/"
@using BlazorSoftata2
@inject BlazorSoftata2.AppState appState
@using ConsoleTextFormat
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@using System.Threading.Tasks
@using BlazorSoftata2.Components
@using BlazorSoftata2.Pages.Components
@using Softata.ActionCommands

<PageTitle>Softata on Blazor</PageTitle>

<h1>Softata on Blazor</h1>

<h3>Welcome to Softata.</h3>


<div class="links" @onclick= "() =>{HideLabel = !HideLabel;}" style="background-color: #F0F0F0" hidden="@HideLabel">
    <hr />
        <h2>Links</h2>
        <i>Click anywhere here to hide this.</i>
        <ul>
        <li><a href="https://github.com/djaus2/Soft-ata" target="_blank">Softata <i>Apps</i></a></li>
            <ul>
                <li><a href="https://github.com/djaus2/Soft-ata/tree/master/code/SoftataConsole2" target="_blank">Console App2 <i>(Github)</i></a></li>
                <li><a href="https://github.com/djaus2/Soft-ata/tree/master/code/BlazorSoftata" target="_blank">Blazor App2 <i>(Not yet available:coming)</i></a></li>
                <li><a href="https://github.com/djaus2/Soft-ata/tree/master/code/SoftataWebAPI" target="_blank">Blockly App2 <i>Not yet available:coming)</i></a></li>
                <li><a href="https://github.com/djaus2/Soft-ata/tree/master/code/Softata" target="_blank">SoftataLib V3.1 <i>Not yet available:coming)</i></a></li>
            </ul>
        <li><a href="https://github.com/djaus2/SoftataDevices" target="_blank">Softata Devices <i>(Arduino}</i></a></li>
        <li><a href="https://davidjones.sportronics.com.au/cats/softata/" target="_blank">Softata Blog Posts</a></li>
        </ul>
    <hr />
</div>


<MyDialog @ref="myDialog" 
    TargetValue="@DialogVa1"
    IsVisible="@isDialog2Visible2"
           Min=@DialogMin
           Max=@DialogMax
           Entity=@DialogEntity
    IsVisibleChanged="@OnDialogVisibilityChanged2" 
    TargetDevicePinChanged="@OnTargetDevicePinChanged2">
    <h4>@DialogMsg</h4>
</MyDialog>


@code {

    private bool HideLabel { get; set; } = false;
    private bool isDialog2Visible2 { get; set; } = false;
    private int targetDevicePin;
    private MyDialog myDialog;
    private int targetDevicePin2 = -1;
    string DialogMsg = "Using Non Default GPIO Pin 16-21";
    int DialogMin = 16;
    int DialogMax = 21;
    int DialogVa1 = 0;
    string DialogEntity = "Pin";

    private async Task ShowDialogFromButton2()
    {
        if (myDialog != null)
        {
            isDialog2Visible2 = true;
            await myDialog.ShowAsync();
            await InvokeAsync(StateHasChanged); // Ensure the UI is updated to show the dialog
        }
    }

    public async Task ShowDialogModally2()
    {
        if (myDialog != null)
        {

            targetDevicePin2 = await myDialog.ShowAsync();
            await InvokeAsync(StateHasChanged); // Ensure the UI is updated to reflect the changes
        }
    }

    private Task OnDialogVisibilityChanged2(bool isVisible)
    {
        isDialog2Visible2 = isVisible;
        return InvokeAsync(StateHasChanged);
    }

    enum DialogMode
    {
        Pin,
        NumBits
    }


    private Task OnTargetDevicePinChanged2(int pin)
    {
        DialogVa1= pin;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private void HandleCommandSelectionKeyDown(KeyboardEventArgs e)
    {
        StateHasChanged();
        string response = appState.CommandsPortal.RunGenericMethod(appState.TargetCommand);
    }

}



 

 <MyDialogTemp @ref="myDialogTemp"
    TargetDevicePin=@appState.TargetDevicePin.Index
    IsVisible="@isDialogVisible" 
    Min=@DialogMin
    Max=@DialogMax
    Entity=@DialogEntity
    IsVisibleChanged="@OnDialogVisibilityChanged" 
    TargetDevicePinChanged="@OnTargetDevicePinChanged">
    <h3>@DialogMsg</h3>
</MyDialogTemp>



@code
{
    // Dialog Code

    private bool ShowDialogButton { get; set; } = true;
    private bool isDialogVisible { get; set; } = false; 

    private MyDialogTemp myDialogTemp;

    private MyDialogTemp GetMyDialogTemp;


    
    private async Task ShowDialog()
    {
        if (myDialogTemp != null)
        {
            DialogVa1 = await myDialogTemp.ShowAsync();
            
            await InvokeAsync(StateHasChanged); // Ensure the UI is updated to reflect the changes
        }
    }

    private Task OnDialogVisibilityChanged(bool isVisible) 
    { 
        isDialogVisible = isVisible; 
        return InvokeAsync(StateHasChanged);
    }

    private Task OnTargetDevicePinChanged(int pin) 
    { appState.TargetDevicePin.Index = pin; 
        return Task.CompletedTask; 
    }
} 


@if (!appState.Connected)
{

    <EditForm Model="@ipInputModel" OnValidSubmit="@HandleValidConnectionSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="text">IPAddress:</label>
            <InputText id="text" @bind-Value="ipInputModel.IpaddressStr" />
        </div>
        <div>
            <label for="number">Port:</label>
            <InputNumber id="number" @bind-Value="ipInputModel.Port" />
        </div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </EditForm>
}
else
{
    <button class="btn btn-primary" @onclick="Disconnect">Disconnect</button>
    @if(appState.DeviceTypes.List.Count > 0)
    {
        <h2>Device Type:</h2>
        <select  @onchange="HandleDeviceTypeSelectionChange">
        <option value="">Select an item...</option> 
        @for (int i = 0; i < appState.DeviceTypes.List.Count; i++)
        {
            <option value="@i">@appState.DeviceTypes.List[i]</option>
        } 
        </select>
        @if (appState.TargetDeviceType != null)
        {
            @if (appState.TargetDeviceType.Item != "")
            {
                <p>Selected Device Type: @appState.TargetDeviceType.Index. @appState.TargetDeviceType.Item</p>

                @if (appState.Devices.List.Count > 0)
                {
                    <h2>Device: </h2>
                    @if (appState.TargetDevice != null)
                    {
                        @if (appState.TargetDevice.Item == "")
                        {
                            <select @onchange="HandleDevicesSelectionChange">
                                <option value="">Select an item...</option>
                                @for (int i = 0; i < appState.Devices.List.Count; i++)
                                {
                                    <option value="@i">@appState.Devices.List[i]</option>
                                }
                            </select>
                        }
                        else if (appState.TargetDevice.Item != "")
                        {
                            <p>Selected Device: @appState.TargetDevice.Index. @appState.TargetDevice.Item</p>
                            
                            @if(appState.Pinouts.List.Count > 0)
                            {
                                <h2>Pinouts: </h2>
                                @if (appState.TargetDevicePinout != null)
                                {
                                    @if (appState.TargetDevicePinout.Item == "")
                                    {
                                        <ul>
                                        @foreach (var pinout in appState.Pinouts.List)
                                        {
                                            <li>@pinout</li>
                                        }
                                        </ul>
                                        <h4>Connect <i>as per one of the above</i> now and then select connection:</h4>
                                        <select @onchange="HandlePinoutSelectionChange">
                                            <option value="">Select an item...</option>
                                            @foreach (var pinout in appState.Pinouts.List)
                                            {
                                                <option >@pinout</option>
                                            }
                                        </select>
                                    }
                                    else if(appState.TargetDevicePinout.Item != "")
                                    {
                                        @if (Instantiated)
                                        {
                                            <table>
                                            @if (appState.TargetDevicePinout.Index == 0)
                                            {
                                                <tr><td>Using Default Setup</td></tr>
                                                @if (appState.TargetDevicePin.Item != "")
                                                {
                                                    <tr><td>@appState.TargetDevicePin.Item</td></tr>
                                                }
                                                                         }
                                            else
                                            {
                                                <tr><td>Using NonDefault Setup</td></tr>
                                                    @if (appState.TargetDevicePin.Item != "")
                                                    {
                                                        <tr><td> @appState.TargetDevicePin.Item </td></tr>
                                                    }                                       
                                            }
                                            @if (appState.TargetDeviceType.Item.ToLower() == "actuator")
                                            {
                                                @if (appState.Num_Bits.Item != "")
                                                {
                                                        <tr><td>Actuator Number Bits <i>(0 means ignored):</i>: @appState.Num_Bits.Index</td></tr>
                                                }
                                            }
                                            else if (appState.TargetDeviceType.Item.ToLower() == "deviceinput")
                                            {
                                                @if (appState.Num_Bits.Item != "")
                                                {
                                                    <tr><td>Actuator Number Bits <i>(0 means ignored):</i>: @appState.Num_Bits.Index</td></tr>
                                                }
                                            }
                                            </table>
                                            @if ((appState.TargetDevicePinout.Index != 0) ||(@appState.TargetDevicePin.Item == ""))
                                            {
                                            <h4>@PinoutStr<br />Instantiated Device. Linked List No: @appState.linkedListNo</h4>
                                            @if (appState.UseGenericCommands.Count > 0)
                                            {
                                                <hr/>
                                                <table>

                                                   <tr>:
                                                        <td>
                                                                @GetDeviceNameHtmlHeading()
                                                        </td>                                                   
                                                    </tr>
                                                    <tr>
                                                   <td   align="right">
                                                        <h3>Generic Command: </h3>
                                                    </td>
                                                    <td>
                                                        <select @onchange="HandleCommandSelectionChange" @onkeydown="HandleCommandSelectionKeyDown" >
                                                            <option value="">Select an item...</option>
                                                            @foreach (var cmd in  appState.UseGenericCommands)
                                                            {
                                                                <option value="@cmd.Key">@cmd.Key. @cmd.Value</option>
                                                            }
                                                        </select>
                                                    </td>
                                                    @if (lastMenuSelectedIndex > -1)
                                                            {
                                                                <td>
                                                                    <button class="btn btn-primary" @onclick="HandleCommandSelection">Repeat</button>
                                                                </td>
                                                            }
                                                            else
                                                            {
                                                                <td>&ensp;</td>
                                                            }
                                                        </tr>
                                                
                                                
                                                @switch (@appState.TargetDeviceType.Item.ToLower())
                                                {
                                                    case "actuator":
                                                            <EditForm Model="@deviceinputModel">

                                                                
                                                                    @if ((@appState.Capabilities & (int)Softata.Enums.ActuatorCapabilities.a_bit) == (int)Softata.Enums.ActuatorCapabilities.a_bit)
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                <label for="numselect">Select bit for single bit commands: </label>
                                                                            </td>
                                                                            <td>
                                                                                <InputNumber id="numselect" @bind-Value="deviceinputModel.bitNum" min="@appState.StartBit" max="@appState.EndBit" />
                                                                            </td>
                                                                        </tr>

                                                                    }
                                                                    @if(
                                                                        ((@appState.Capabilities & (int)Softata.Enums.ActuatorCapabilities.a_writebyte) == (int)Softata.Enums.ActuatorCapabilities.a_writebyte)
                                                                        ||
                                                                       ((@appState.Capabilities & (int)Softata.Enums.ActuatorCapabilities.a_writeword) == (int)Softata.Enums.ActuatorCapabilities.a_writeword)
                                                                    )
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                <label for="numselect">Select value to send to actuator <i>(byte/word write)</i>: </label>
                                                                            </td>
                                                                            <td>
                                                                                <InputNumber id="numselect" @bind-Value="deviceinputModel.value" min="@appState.selectedDeviceLoopVars.actuatorRange.Item1" max="@appState.selectedDeviceLoopVars.actuatorRange.Item2" />
                                                                            </td>
                                                                        </tr>

                                                                    }
                                                                    @if (
                                                                        ((@appState.Capabilities & (int)Softata.Enums.ActuatorCapabilities.a_bit) == (int)Softata.Enums.ActuatorCapabilities.a_bit)
                                                                            ||
                                                                        ((@appState.Capabilities & (int)Softata.Enums.ActuatorCapabilities.a_none) == (int)Softata.Enums.ActuatorCapabilities.a_none)
                                                                    )
                                                                    {
                                                                        <tr>
                                                                            <td>
                                                                                <label for="boolselect">State for SetState function: &nbsp;<i>(True/False Checked/Unchecked)</i></label>
                                                                            </td>
                                                                            <td align="center">
                                                                                <InputCheckbox id="numselect" @bind-Value="deviceinputModel.Bool"/>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                               
                                                            </EditForm>
                                                        break;
                                                    case "display":
                                                                @if((deviceinputModel?.DisplayMiscCmds?.Count() ?? 0) != 0)
                                                                {
                                                                    <tr>
                                                                        <td   align="right">
                                                                            <h3>Display Misc Commands <i><small>(device specific)</small></i>: </h3>
                                                                        </td>
                                                                        <td>
                                                                        <select id="miscselect" @onchange="HandleDisplayorSensorMiscCmdSelectionChange" @onkeydown="HandleDisplayorSensorMiscCmd">
                                                                            <option value="">Select an item...</option>
                                                                            @foreach (var cmd in deviceinputModel.DisplayMiscCmds)
                                                                            {
                                                                                <option value="@cmd">@cmd</option>
                                                                            }
                                                                        </select>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                                <tr>
                                                                    <td>
                                                                        <label for="csv">Enter string or CSV string list: </label>
                                                                    </td>
                                                                    <td>
                                                                        <InputText id="csv" @bind-Value="deviceinputModel.parameters" />
                                                                    </td>
                                                                </tr>  

                                                                <tr>
                                                                    <td>
                                                                        <label for="numselect">Select numeric entry (eg Bit/Level): </label>
                                                                    </td>
                                                                    <td>
                                                                        <InputNumber id="numselect" @bind-Value="deviceinputModel.bitNum" min="@appState.StartBit" max="@appState.EndBit" />
                                                                    </td>
                                                                </tr>
                                                                break;
                                                    case "sensor":
                                                        @if((deviceinputModel?.SensorProperties?.Count() ?? 0) != 0)
                                                        {
                                                            <tr>
                                                                <td align="right">
                                                                    <h3>Select Sensor Property<i><small>(for Read() cmd)</small></i>: </h3>
                                                                </td>
                                                                <td>
                                                                <select id="miscselect" @onchange="HandleDisplayorSensorMiscCmdSelectionChange" @onkeydown="HandleDisplayorSensorMiscCmd">
                                                                    <option value="">Select an item...</option>
                                                                    @foreach (var cmd in deviceinputModel.SensorProperties)
                                                                    {
                                                                        <option value="@cmd">@cmd</option>
                                                                    }
                                                                </select>
                                                                </td>
                                                            </tr>
                                                        }
                                                        break;
                                                    case "deviceinput":
                                                        <EditForm Model="@deviceinputModel">

                                                           
                                                                @if ((@appState.Capabilities & (int)Softata.Enums.DeviceInputCapabilities.i_bit) == (int)Softata.Enums.DeviceInputCapabilities.i_bit)
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            <label for="numselect">Select num bit for single bit commands: </label>
                                                                        </td>
                                                                        <td>
                                                                            <InputNumber id="numselect" @bind-Value="deviceinputModel.numBits" min="1" max="@appState.Num_Bits.Index" />
                                                                        </td>
                                                                    </tr>

                                                                }
                                                           
                                                        </EditForm>
                                                        break;
                                                    default:
                                                        break;
                                                }
                                                </table>
                                                @if (appState.TargetCommand != null)
                                                {
                                                    @if (appState.TargetCommand.Item != "")
                                                    {
                                                        <p>Selected Command: @appState.TargetCommand.Index. <font color ="purple"><b>@appState.TargetCommand.Item</b></font><br />
                                                            <i><font color ="blue">Press <b>[Repeat]</b> to rerun Cmd.</font></i></p>
                                                        @switch(@appState.TargetDeviceType.Item.ToLower())
                                                        {
                                                            /*case "actuator":
                                                               @if (appState.Num_Bits.Index>1)
                                                                {
                                                                    <GetNumberComponent @ref="getNumberComponent"
                                                                                        Value="@DialogVa12"
                                                                                        ValueChanged="@OnGetNumberComponentValueChanged"
                                                                                        IsVisible="true"
                                                                                        Min=@DialogMin2
                                                                                        Max=@DialogMax2
                                                                                        Entity="@DialogEntity2">
                                                                        <h4>Get Acuator input value</h4>
                                                                    </GetNumberComponent>
                                                                }
                          
                                                                break;*/
                                                            case "display":
                                                                break;
                                                            case "sensor":
                                                                break;
                                                            case "actuator":
                                                            case "deviceinput":
                                                                    <EditForm Model="@deviceinputModel">
                                                                        <table>
                                                                            <tr>
                                                                                <td>
                                                                                    <label >@deviceinputModel.title</label>
                                                                                </td>
                                                                                <td>
                                                                                     @deviceinputModel.cmd
                                                                                </td>
                                                                            </tr>
                                                                            <tr>                                               
                                                                                <td>
                                                                                    <label>Result:</label>
                                                                                </td>
                                                                                <td>
                                                                                    @deviceinputModel.result 
                                                                                </td>                                                                            
                                                                            </tr>
                                                                        </table>
                                                                    </EditForm>
                                                                break;
                                                            default:
                                                                break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@if(@deviceinputModel.commandResultString!= "" )
{
    <p><b>Result:</b>&nbsp;@deviceinputModel.commandResultString</p>
    <hr />
}

@Info()



@code{

    Dictionary<string, int> numBitsDict = new Dictionary<string, int>
    {
        {"gbargraph",2},
        {"lcd1602",3 },
        {"gswitch",2 },
        {"dht11",3 },
        {"oled096",-1 }
    };

    List<string> lines = new List<string>();

    private MarkupString Info()
    {
        string htmlContent = "<hr /><p>";
        if (deviceinputModel.lines.Count()>4)
        {
            deviceinputModel.lines = lines.Skip(1).ToList();
        }
        lines = deviceinputModel.lines;
        foreach (var line in lines)
        {
            htmlContent += line + "<br />";
        }
        htmlContent += "</p><hr />";
        return new MarkupString(htmlContent);
    }

    /// <summary>
    /// Generate uppercase first (or more) char for heading, rest lowercase.
    /// Nb: Can't include functions etc in HTML so need to use a Markupnameof function liek this.
    /// Possible improvement: Get the lists above from Softata on device.
    /// Requires entry dictionary<string,int>
    /// Where key is the device name in lowercase
    /// And corresponding number of uppercase chars in the value.
    /// ToDo: Names ending in number to be all uppercase
    /// </summary>
    /// <returns>HTML Markup string</returns>
    private MarkupString GetDeviceNameHtmlHeading()
    {
        string heading = appState.TargetDevice.Item.ToLower();
        int numUpper = 1;
        if (numBitsDict.Keys.Contains(heading))
        {
            numUpper = numBitsDict[heading];
        }
        if (numUpper < 1)
            heading = heading.ToUpper();
        else
            heading = heading.Substring(0, numUpper).ToUpper() + heading.Substring(numUpper);


        string htmlContent = " <font color=\"purple\">";
        htmlContent += $"<h2>{heading}</h2>";
        htmlContent += "</font>";
        return new MarkupString(htmlContent);
    }

    public class DeviceinputModel
    {
        public DeviceinputModel()
        {
            title = "";
            cmd = "";
            result = "";
            maxValue = 10;
        }

        public DeviceinputModel(string title, string cmd, string result)
        {
            this.title = title;
            this.cmd = cmd;
            this.result = result;
        }
        public string title { get; set; }
        public string cmd { get; set; }
        public string result { get; set; }
        public int bitNum { get; set; }
        public int maxValue { get; set; }
        public int value { get; set; }
        public double doubleValue { get; set; }
        public int numBits { get; set; }
        public int startBit { get; set; } = 0;
        public int endBit { get { return numBits-1; } }
        public bool Bool {get; set;}
        public string stringValue { get; set; } = "";
        public int csvSelection { get; set; } = 0;
        public Func<int, string, bool, bool, Selection> SelectFromCSV { get; set; }
        public int lastMiscMenuSelectedIndex { get; set; } = -1;
        public int commandResultInt { get; set; } = 0;
        public double commandResultDouble { get; set; } = 0.0;
        public string commandResultString { get; set; } = "";
        public List<string> lines = new List<string>();
        public string parameters { get; set; } = "";
        public List<string>? DisplayMiscCmds = null;
        public List<string>? SensorProperties = null;
    }

    public static DeviceinputModel deviceinputModel { get; set; } = new DeviceinputModel();
}






@if (getNumberComponent != null)
{
    <p>@DialogVa12</p>
}
@code
{

    public bool ShowInput{ get { return (appState.UseGenericCommands.Count > 0); }}
    private GetNumberComponent getNumberComponent;
    private int DialogVa12 = 90;
    private int DialogMin2 = 0;
    private int DialogMax2 = 180;
    private string DialogEntity2 = "Input Value";
    private void OnGetNumberComponentValueChanged(int newValue) {
        DialogVa12 = newValue; }
}

@code{
    //[Inject]
    //private IJSRuntime JSRuntime { get; set; }



    int selectedpins { get; set; } = 0;
    int lln = -1;
    string PinoutStr { get; set; } = "";
    bool Instantiated { get; set; } = false;


    public class IPInputModel
    {
        private string ipaddressStr;
        public string IpaddressStr { 
            get => ipaddressStr; 
            set { ipaddressStr = value; } }
        public int Port { get; set; } 
    }

    IPInputModel ipInputModel { get; set; } = new IPInputModel();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            lastMenuSelectedIndex = -1;
            lastMiscMenuSelectedIndex = -1;
            deviceinputModel.lastMiscMenuSelectedIndex = lastMiscMenuSelectedIndex;

            bool loaded = appState.Loaded;
            if (!loaded)
            {
                string? _ipaddressStr = SettingsManager.ReadSetting("IpaddressStr");

                if (!string.IsNullOrEmpty(_ipaddressStr))
                {
                    ipInputModel.IpaddressStr = _ipaddressStr;
                    StateHasChanged();
                }

                string _port = SettingsManager.ReadSetting("Port");
                if (!string.IsNullOrEmpty(_port))
                {
                    if (uint.TryParse(_port, out uint _portNo))
                    {
                        ipInputModel.Port = (int)_portNo;
                        StateHasChanged();
                    }

                }
            }
            else
            {
                ipInputModel.IpaddressStr = appState.IpaddressStr;
                ipInputModel.Port = appState.Port;
                StateHasChanged();
            }
            StateHasChanged();
        }
    }

    int selectedIndex { get; set; } = 0;

    private async Task HandleValidConnectionSubmit()
    {
        string? _ipaddressStr = SettingsManager.ReadSetting("IpaddressStr");
        if (!string.IsNullOrEmpty(_ipaddressStr))
        {
            if (_ipaddressStr.Count(c => c == '.') == 3)
            {
                if (System.Net.IPAddress.TryParse(_ipaddressStr, out System.Net.IPAddress? address))
                {
                    if (!string.IsNullOrEmpty(ipInputModel.IpaddressStr))
                    {
                        if (ipInputModel.IpaddressStr.Count(c => c == '.') == 3)
                        {
                            if (System.Net.IPAddress.TryParse(ipInputModel.IpaddressStr, out System.Net.IPAddress? address2))
                            {
                                if (_ipaddressStr != ipInputModel.IpaddressStr)
                                {
                                    SettingsManager.AddUpdateAppSettings("IpaddressStr", ipInputModel.IpaddressStr);
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(ipInputModel.IpaddressStr))
            {
                if (ipInputModel.IpaddressStr.Count(c => c == '.') == 3)
                {
                    if (System.Net.IPAddress.TryParse(ipInputModel.IpaddressStr, out System.Net.IPAddress? address2))
                    {
                        SettingsManager.AddUpdateAppSettings("IpaddressStr", ipInputModel.IpaddressStr);
                    }
                }
            }
        }






        if (appState.IpaddressStr != ipInputModel.IpaddressStr)
        {
            appState.IpaddressStr = ipInputModel.IpaddressStr;
        }

        string _port = SettingsManager.ReadSetting("Port");
        if (!string.IsNullOrEmpty(_port))
        {
            if(uint.TryParse(_port, out uint _portNo))
            {
                if(_portNo != ipInputModel.Port)
                {
                    SettingsManager.AddUpdateAppSettings("Port", ipInputModel.Port.ToString());
                }
            }
        }
        else
        {
            SettingsManager.AddUpdateAppSettings("Port", ipInputModel.Port.ToString());
        }
        if (appState.Port != ipInputModel.Port)
        {
            appState.Port = ipInputModel.Port;
        }
        await Connect();
        //appState.softataLib = new Softata.SoftataLib();
        Softata.ActionCommands.CommandsPortal.Setup(
            new LLLayout( ),
            GetGenericCmdIndex,
            appState.softataLib
        );
        if(string.IsNullOrEmpty(appState.Devices.CSV))
        {
            Begin();
        }


        //appState.Connected = true;
    }

    private void HandleDeviceTypeSelectionChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string val = e.Value.ToString();
            if (!string.IsNullOrEmpty(val))
                if (int.TryParse(val, out int selectedIndex))
                {
                    appState.TargetDeviceType = new Selection(selectedIndex, appState.DeviceTypes.List[(int)selectedIndex]);
                    StateHasChanged();
                    GetDevices();
                    appState.TargetDevice = new Selection();
                    appState.TargetDevicePinout = new Selection();
                    appState.TargetCommand = new Selection();
                    StateHasChanged();
                }

            lastMenuSelectedIndex = -1;
            lastMiscMenuSelectedIndex = -1;
            deviceinputModel.lastMiscMenuSelectedIndex = lastMiscMenuSelectedIndex;
        }
    }



    private void HandleDevicesSelectionChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string val = e.Value.ToString();
            if (!string.IsNullOrEmpty(val))
                if (int.TryParse(val, out int selectedIndex))
                {
                    appState.TargetDevice = new Selection(selectedIndex, appState.Devices.List[(int)selectedIndex]);
                    GetPinouts();
                    appState.TargetDevicePinout = new Selection();
                    appState.TargetCommand = new Selection();
                    StateHasChanged();
                }
            lastMenuSelectedIndex = -1;
        }
    }

    private async Task SelectNonDefaultDevicePin()
    {
        this.DialogVa1 = appState.TargetDevicePin.Index;
        DialogMin = 16;
        DialogMax = 21;
        DialogEntity = "Pin";
        DialogMsg = "Using Non Default GPIO Pin 16-21";

        await ShowDialogFromButton2();
        appState.TargetDevicePin.Item = $"Using GPIO Pin {DialogVa1}";
        appState.TargetDevicePin.Index  = DialogVa1;
        StateHasChanged();
    }

    private async Task GetActuatorNumBits()
    {
        if (appState.Max_Num_Bits > 1)
        {
            this.DialogVa1 = appState.Max_Num_Bits;
            DialogMin = 0;
            DialogMax = appState.Max_Num_Bits;
            DialogEntity = "Num Bits";
            DialogMsg = $"Number of Bits: 1-{DialogMax} (Default {DialogMax}), 0=Ignored, eg Grove Relay";
            await ShowDialogFromButton2();
        }
        else
            DialogVa1 = appState.Max_Num_Bits;
        appState.Num_Bits.Index = DialogVa1;
        appState.Num_Bits.Item = $"Number of Bits: {DialogVa1}";
        StateHasChanged();
    }

    public async Task<int> GetActuatorValueToSet(int start, int end)
    {
        this.DialogVa1 = appState.selectedDeviceLoopVars.Value;
        DialogMin = start;
        DialogMax = end;
        DialogEntity = "Actuator value";
        DialogMsg = $"Set Actuator Value: 0-{DialogMax} (Default {this.DialogVa1})";
        await ShowDialogFromButton2();
        return this.DialogVa1;
    }


    private void GetDeviceInputNumBits()
    {

        byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("Getnumbits", appState.GenericCommands.List);
        string numbitsStr = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, 1, subCmd, (byte)0xff, appState.linkedListNo);
        if(int.TryParse(numbitsStr, out int numbits))
        {
            appState.Num_Bits.Index = numbits;
            appState.Num_Bits.Item = $"Number of Bits: {numbits}";
        }
        StateHasChanged();
    }

    private async Task HandlePinoutSelectionChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string? item = e.Value.ToString();
            if (!string.IsNullOrEmpty(item))
            {
                int selectedIndex = appState.Pinouts.List.FindIndex(s => s.Contains(item, StringComparison.OrdinalIgnoreCase));
                if (selectedIndex > -1)
                {
                    appState.TargetDevicePinout = new Selection(selectedIndex, appState.Pinouts.List[(int)selectedIndex]);
                    StateHasChanged();
                    if(selectedIndex>0)
                    {
                        await SelectNonDefaultDevicePin();
                        // @if (ShowDialogButton)
                        // {
                        //     <button @onclick="ShowDialog" class="btn btn-primary">ShowDialog</button>
                        // }
                    }

                    Instantiate();
                    if (appState.TargetDeviceType.Item.ToLower() == "actuator")
                    {
                        await GetActuatorNumBits();
                    }
                    if (appState.TargetDeviceType.Item.ToLower() == "deviceinput")
                    {
                        GetDeviceInputNumBits();
                    }
                    appState.TargetCommand = new Selection();
                }
                deviceinputModel.maxValue = appState.MaxVal;
                deviceinputModel.numBits = appState.Num_Bits.Index;
                StateHasChanged();
            }
        }
    }

    #region CMD SELECTION
    //////////////////////// M I S C   C M D   S E L E C T I O N ////////////////////////////////////
    ///
    private int lastMiscMenuSelectedIndex { get; set; } = -1;

    private void HandleDisplayorSensorMiscCmdSelectionChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string? val = e.Value.ToString();
            if (!string.IsNullOrEmpty(val))
            {
                int selectedIndex = -1;
                if(appState.TargetDeviceType.Item.ToLower() == "display")
                    selectedIndex = deviceinputModel?.DisplayMiscCmds?.IndexOf(val) ?? -1;
                else if(appState.TargetDeviceType.Item.ToLower() == "sensor")
                    selectedIndex = deviceinputModel?.SensorProperties?.IndexOf(val) ?? -1;

                if (selectedIndex > -1)
                {
                    HandleDisplayorSensorMiscCmd(selectedIndex);
                }
            }
        }
    }

    private void HandleDisplayorSensorMiscCmd()
    {
        int selectedIndex = deviceinputModel.lastMiscMenuSelectedIndex;
        if (selectedIndex > -1)
        {
            HandleDisplayorSensorMiscCmd(selectedIndex);
        }
    }

    private void HandleDisplayorSensorMiscCmd(int selectedIndex)
    {
        if (selectedIndex > -1)
        {
            lastMiscMenuSelectedIndex = selectedIndex;
            deviceinputModel.lastMiscMenuSelectedIndex = lastMiscMenuSelectedIndex;
            if (appState.TargetDeviceType.Item == "display")
            {
                byte miscGenericCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("misc", appState.GenericCommands.List);
                appState.TargetCommand = new Selection(miscGenericCmd, appState.GenericCommands.List[(int)miscGenericCmd]);
                StateHasChanged();

                string response = appState.CommandsPortal.RunGenericMethod(appState.TargetCommand);
                if (int.TryParse(response, out int result))
                {
                    deviceinputModel.commandResultInt = result;
                }
                else if (double.TryParse(response, out double dbl))
                {
                    deviceinputModel.commandResultDouble = dbl;
                }

                deviceinputModel.commandResultString = response;
            }
            else if (appState.TargetDeviceType.Item == "sensor")
            {
                byte readOneGenericCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("readone", appState.GenericCommands.List);
                appState.TargetCommand = new Selection(readOneGenericCmd, appState.GenericCommands.List[(int)readOneGenericCmd]);
                StateHasChanged();

                string response = appState.CommandsPortal.RunGenericMethod(appState.TargetCommand);
                if (int.TryParse(response, out int result))
                {
                    deviceinputModel.commandResultInt = result;
                }
                else if (double.TryParse(response, out double dbl))
                {
                    deviceinputModel.commandResultDouble = dbl;
                }

                deviceinputModel.commandResultString = response;
            }


        }
    }

    //////////////////////// G E N E R I C   C M D   S E L E C T I O N //////////////////////////////

    private int lastMenuSelectedIndex { get; set; } = -1;

    private void HandleCommandSelectionChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string? val = e.Value.ToString();
            if (!string.IsNullOrEmpty(val))
            {
                if (int.TryParse(val, out int selectedIndex))
                {
                    if (selectedIndex > -1)
                    {
                        HandleCommand(selectedIndex);
                    }
                }
            }
        }
    }

    private void HandleCommandSelection()
    {
        int selectedIndex = lastMenuSelectedIndex;
        if (selectedIndex > -1)
        {
            HandleCommand(selectedIndex);
        }
    }

    private void HandleCommand(int selectedIndex)
    {
        if (selectedIndex > -1)
        {
            appState.TargetCommand = new Selection(selectedIndex, appState.UseGenericCommands[(int)selectedIndex]);
            deviceinputModel.lines .Clear();
            StateHasChanged();
            string response = appState.CommandsPortal.RunGenericMethod(appState.TargetCommand);
            lastMenuSelectedIndex = selectedIndex;
        }
    }

    //////////////////////// E N D   C M D   S E L E C T I O N /////////////////////////////////////////////////
    #endregion

    public void Disconnect()
    {
        if (appState.Connected)
        {
            appState.softataLib.SendMessageCmd("End");
            appState.softataLib.Disconnect();
            Thread.Sleep(500);
        }
        appState.Connected = false;       
        appState.softataLib = new Softata.SoftataLib();
        Softata.ActionCommands.CommandsPortal.Setup(
            new LLLayout(),
            GetGenericCmdIndex,
            appState.softataLib
        );
        appState = new AppState();
    }

    public void Restart()
    {
        if (appState.Connected)
        {
            appState.softataLib.SendMessageCmd("End");
            appState.softataLib.Disconnect();
            Thread.Sleep(500);
        }
        appState.Connected = false;
        appState.softataLib = new Softata.SoftataLib();
        Softata.ActionCommands.CommandsPortal.Setup(
            new LLLayout(),
            GetGenericCmdIndex,
            appState.softataLib
        );

        appState = new AppState();
    }

    public async Task Connect()
    {
        if (!appState.Connected)
        {
            bool res = appState.softataLib.Connect(appState.IpaddressStr, appState.Port);
            if (!res)
            {
                await ShowAlert($"Failed to connect to {appState.IpaddressStr}:{appState.Port}");
                await ShowAlert("Press [Enter] to try again or [Q] to quit");
                string? key = Console.ReadLine();
                if (!string.IsNullOrEmpty(key))
                {
                    if (key.ToUpper() == "Q")
                        appState.Quit = true;
                }
            }
            else
            {
                appState.Connected = true;
                await ShowAlert($"Connected to {appState.IpaddressStr}:{appState.Port}");
            }

        }
    }

    public void Begin()
    {
        appState.softataLib.SendMessageCmd("Begin");
        Thread.Sleep(100);
        string Version = appState.softataLib.SendMessageCmd("Version");
        System.Diagnostics.Debug.WriteLine($"Softata Version: {Version}");
        Thread.Sleep(100);
        string cmdsOffset = appState.softataLib.SendMessageCmd("Soffset");
        if (int.TryParse(cmdsOffset, out int _offset))
        {
            appState.softataLib.Offset = _offset; //Should be 0xf0
            System.Diagnostics.Debug.WriteLine($"CommandsOffset: {_offset}");
        }
        Thread.Sleep(100);
        appState.DeviceTypes.CSV = appState.softataLib.SendMessageCmd("Devices");
        System.Diagnostics.Debug.WriteLine($"{appState.DeviceTypes.CSV}");
        StateHasChanged();
    }

    public void GetDevices()
    {
        byte subCmd = 0; //getCmds Always first
        appState.GenericCommands.CSV = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, 1, subCmd);


        //Get commands to be diaplyed in menu
        appState.UseGenericCommands = new Dictionary<int, string>();
        for (int i = 0; i < appState.GenericCommands.List.Count(); i++)
        {
            // This fix could be done better .. more "generically"!
            if(appState.TargetDeviceType.Item=="sensor")
            {
                if(appState.GenericCommands.List[i].ToLower().Contains("getproperties"))
                {
                    continue;
                }
            }
            else if(appState.TargetDeviceType.Item=="display")
            {
                if(appState.GenericCommands.List[i].ToLower().Contains("misc"))
                {
                    continue;
                }
            }
            if (char.IsUpper(appState.GenericCommands.List[i][0]))
            {


            }
            else
            {
                // Will have leading A_ D_ or S_
                // OR
                // leading S__ D__ or S__
                if (appState.GenericCommands.List[i].Substring(1, 2) == "__")
                {
                    // These commands are called from the device class type
                    // Using the specific device type ordinal
                    // Without using an instance
                    string cmd = appState.GenericCommands.List[i].Substring(3);
                    appState.Stringlist.Add(cmd);
                    appState.UseGenericCommands.Add(i, cmd);
                    // Will have leading A_ D_ or S_
                    // General Actuator/Display/Sensor class info
                }
                else
                {
                    //Will have leading a_ d_ or s_
                    string cmd = appState.GenericCommands.List[i].Substring(2);
                    appState.UseGenericCommands.Add(i, cmd);
                }
            }
        }
        subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("getDevices", appState.GenericCommands.List);
        appState.Devices.CSV = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, 0, subCmd);
        Thread.Sleep(100);
        StateHasChanged();

    }

    private void GetPinouts()
    {
        byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("getpins", appState.GenericCommands.List);
        appState.Pinouts.CSV = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, 1, subCmd, (byte)appState.TargetDevice.Index);

        Thread.Sleep(100);
    }

    private void Instantiate()
    {
        if (appState.TargetDevicePinout.Index == 0)
        {
            if (appState.TargetDevicePinout.Item.Contains("="))
            {
                string[] info = appState.TargetDevicePinout.Item.Split("=");
                appState.TargetDevicePinout.Item = info[0].Trim();
            }
            PinoutStr = $"Using Default Setup: {appState.TargetDevicePinout.Item}";
            byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("setupdefault", appState.GenericCommands.List);
            string result = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, 1, subCmd, (byte)appState.TargetDevice.Index);
            appState.linkedListNo = 0xff;
            if (byte.TryParse(result, out byte lln))
            {
                if (lln != 0xff)
                {
                    appState.linkedListNo = lln;
                }
                else
                { bool quit = true; }

            }


        }
        else
        {
            /*            byte pinn = 16;
        * 
        * 
        appState.TargetDevicePin.Index = pinn;
        appState.TargetDevicePin.Item = $"Pin = {pinn}";


        appState.Num_Bits.Index = 4;*/
            //Layout.Info($"Using NonDefault Setup: {TargetPin.Item} Num Bits:{num_bits}");

            byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("setupgeneral", appState.GenericCommands.List);
            byte[] data = new byte[] { (byte)appState.Num_Bits.Index };
            //(byte)appState.TargetDeviceType.Index
            //string result = appState.softataLib.SendTargetCommand((byte)appState.TargetCommand.Index, (byte)appState.TargetDevicePin.Index, subCmd, (byte)appState.TargetDevice.Index, 0xff, data);
            string result = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, (byte)appState.TargetDevicePin.Index, subCmd, (byte)appState.TargetDevice.Index, 0xff, data);

            appState.linkedListNo = 0xff;
            if (byte.TryParse(result, out byte lln))
            {
                if (lln != 0xff)
                    appState.linkedListNo = lln;
                else
                { bool quit = true; }

            }
        }

        if (appState.TargetDeviceType.Item.ToLower() == "actuator")
        {
            byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("GetActuatorCapab", appState.GenericCommands.List);
            string response = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, (byte)appState.TargetDevicePin.Index, (byte)subCmd, (byte)0xff, appState.linkedListNo);

            if (int.TryParse(response, out int capabilities))
            {
                appState.Capabilities = capabilities;
            }
            subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("Getnumbits", appState.GenericCommands.List);
            response = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, (byte)appState.TargetDevicePin.Index, (byte)subCmd, (byte)0xff, appState.linkedListNo);
            System.Diagnostics.Debug.WriteLine($"1. Response: {response}");
            if (int.TryParse(response, out int _numBits))
            {
                appState.Max_Num_Bits = _numBits;  
                appState.selectedDeviceLoopVars.actuatorRange = new Tuple<int, int>(0, (int)Math.Pow(2, _numBits) - 1);
            }
            subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("GetInstanceValueRange", appState.GenericCommands.List);
            response = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, (byte)appState.TargetDevicePin.Index, (byte)subCmd, (byte)0xff, appState.linkedListNo);
            if (int.TryParse(response, out int _maxRange))
            {
                appState.Max_Num_Bits = _numBits;
                appState.selectedDeviceLoopVars.actuatorRange = new Tuple<int, int>(0, _maxRange);
            }
            else if (response.Contains("..."))
            {
                string[] parts = response.Split("...");
                if (parts.Length > 1)
                {
                    if (int.TryParse(parts[0], out int start))
                    {
                        if (int.TryParse(parts[1], out int end))
                        {
                            appState.selectedDeviceLoopVars.actuatorRange = new Tuple<int, int>(start, end);
                        }
                    }
                }
            }
        }
        else if(appState.TargetDeviceType.Item.ToLower() == "display")
        {
            deviceinputModel.DisplayMiscCmds = appState.softataLib.GetDisplayMiscCmds(appState.GenericCommands.List, appState.TargetDevice);
            // Get Display Misc commands

        }
        else if (appState.TargetDeviceType.Item.ToLower() == "deviceinput")
        {
            byte subCmd = Softata.SoftataLib.GetGenericCmdIndexfromList("GetInputCapab", appState.GenericCommands.List);
            string response = appState.softataLib.SendTargetCommand((byte)appState.TargetDeviceType.Index, (byte)appState.TargetDevicePin.Index, (byte)subCmd, (byte)0xff, appState.linkedListNo);

            if (int.TryParse(response, out int capabilities))
            {
                appState.Capabilities = capabilities;
            }
        } 
        else if(appState.TargetDeviceType.Item.ToLower() == "sensor")
        {
            deviceinputModel.SensorProperties = appState.softataLib.GetSensorPropertiess(appState.GenericCommands.List, appState.TargetDevice);
        }

        Softata.ActionCommands.CommandsPortal commandsPortal = new Softata.ActionCommands.CommandsPortal
        (
            appState.GenericCommands.List.ToArray(),
            appState.UseGenericCommands,
            appState.Stringlist,
            appState.TargetDeviceType,
            appState.TargetDevice,
            appState.linkedListNo,
            appState.Capabilities
        );
        commandsPortal.isBlazor = true;
        appState.CommandsPortal = commandsPortal;
        Thread.Sleep(100);
        Instantiated = true;
        StateHasChanged();
    }

    private async Task ShowAlert(string msg)
    {
        await JsRuntime.InvokeVoidAsync("alert", msg);
        //await JSRuntime.InvokeVoidAsync(title, msg);
    }

    private static byte GetGenericCmdIndex(string cmd, string[] GenericCmds)
    {
        byte subCmd = 0;
        for (int i = 0; i < GenericCmds.Length; i++)
        {
            if (GenericCmds[i].ToLower().Contains(cmd.ToLower()))
            {
                subCmd = (byte)i;
                break;
            }
        }
        return subCmd;
    }



    public class LLLayout: Softata.ActionCommands.ILLayout
    {

        static public Func <int,int,int> GetByteValue { get; set;}
        static public Func <int, int, bool, int> GetNum2 { get; set; }
        static public Func <bool> GetBool { get; set; }
        static public Action<string,string> ShowInfo { get; set; }
        public  Func<int , string ,bool, bool, Selection> SelectFromCSV  {get; set; }


        public LLLayout()
        {
            SelectFromCSV = deviceinputModel.SelectFromCSV;
        }

        public void Info(string msg, string msg2="")
        {
            if (string.IsNullOrEmpty(msg))
            {
                throw new ArgumentException($"'{nameof(msg)}' cannot be null or empty.", nameof(msg));
            }

            if (msg.Contains("Selected"))
            {
                deviceinputModel.title = msg; 
                deviceinputModel.cmd = msg2;
                deviceinputModel.result = "";
            }
            else if (msg.Contains("Getting"))
            {
                deviceinputModel.lines.Add($"{msg} {msg2}");
            }
            else
            {
                deviceinputModel.lines.Add(msg);
                deviceinputModel.result = msg2;
            }          
        }

        public void Prompt(string msg, string msg2)
        {
            Info(msg,msg2);
        }

        public bool Prompt4Bool()
        {
            if (GetBool != null)
                return GetBool();
            else
                return deviceinputModel.Bool;
        }



        // Nb: start and endd for bits are from 1 to maxbit

        int  ILLayout.Prompt4IntInRange(int start, int endd)
        {     
            if(GetByteValue != null)
            {
                return GetByteValue(start, endd);
            }
            else 
            {
                if (endd == deviceinputModel.maxValue)
                    return deviceinputModel.value;
                else if (endd == (deviceinputModel.endBit+1) )  //appState.EndBit)
                    return deviceinputModel.bitNum;
                else 
                    return 0;
            }
        }

        // Nb: start and endd for bits are from 1 to maxbit

        int ILLayout.Prompt4Num(int start, int endd, bool backquit)
        {
            if(GetNum2 != null)
                return GetNum2(start, endd,backquit);
            else
            {
                if (endd == deviceinputModel.maxValue) 
                    return deviceinputModel.value;
                else if (endd == (deviceinputModel.endBit+1))  //appState.EndBit)
                    return deviceinputModel.bitNum;
                else
                    return deviceinputModel.bitNum;
            }
        }

        public Selection PromptWithCSVList(int defaultInt, string csvList, bool quit, bool back)
        {
            if (SelectFromCSV != null)
                return SelectFromCSV(defaultInt, csvList, quit, back);
            else
            {
                int cmd = -1;
                if ((deviceinputModel?.DisplayMiscCmds ?.Count() ?? 0) == 0)
                {
                    string[] removeColon = csvList.Split(":");
                    string[] items = removeColon;
                    if (items.Count() > 1)
                        items = removeColon[1].Split(",");
                    deviceinputModel.DisplayMiscCmds = items.ToList();
                    //return new Selection(-1);
                }

                cmd = deviceinputModel.lastMiscMenuSelectedIndex;
                if(cmd<0)
                    return new Selection(cmd);
                else if(cmd < (deviceinputModel?.DisplayMiscCmds?.Count() ?? 0) )
                    return new Selection(cmd, deviceinputModel.DisplayMiscCmds[cmd]);
                else
                    return new Selection(cmd);
            }
        }

        public string ReadLine()
        {
            return deviceinputModel.stringValue;
        }

        public List<int> Prompt4NumswithMaxes(int numValues, string csvListMaxes, Fmt.Col promptcol, Fmt.Col infocol)
        {
            if (numValues == 2)
                return new List<int> { 1, 1 };
            else return new List<int> { 10 };
        }

        public List<int> Prompt4Nums(int numValues, Fmt.Col promptcol, Fmt.Col infocol)
        {
            if(numValues == 2)
                return new List<int> { 1, 1 };
            else return new List<int> { 10};
        }

        public string Prompt4String(string prompt, Fmt.Col promptcol, Fmt.Col infocol)
        {
            Info($"{prompt}: ");
            string? res = deviceinputModel.parameters;
            if (res == null)
                return "";
            return res;
        }

        public List<int> Prompt4NumswithMaxesandText(int numValues, string csvListMaxes, out string textOnEndStr, bool textOnEnd, Fmt.Col promptcol, Fmt.Col infocol)
        {
            string[] parts = csvListMaxes.Split(",");
            string msg = $"This requires {{numValues}} values separated by commas";
            string msg2 = "";
            int expectedNumVals = numValues;
            textOnEndStr = "";


            if (parts.Length != numValues)
            {
                Info(msg,msg2);
                textOnEndStr = "_fail_";
                return new List<int> {};
            }
            List<int> intListMazes = new List<int>();
            foreach (string item in parts)
            {
                if (int.TryParse(item, out int number))
                {
                    intListMazes.Add(number);
                }
                else
                {
                    Info(msg,msg2);
                    textOnEndStr = "_fail_";
                    return new List<int> {};
                }
            }
            if (intListMazes.Count != numValues)
            {
                Info(msg,msg2);
                textOnEndStr = "_fail_";
                return new List<int> { };
            }
            string ranges = "0 to " + csvListMaxes.Replace(",", ", 0 to ");
            msg = $"You need to enter {numValues} values separated by commas within ranges: {ranges}";
            if (textOnEnd)
            {
                msg += " With text on end";
            }
            Info(msg);
            List<int> values = new List<int>();
            while (values.Count() != numValues)
            {
                values = Prompt4NumsandText(numValues, out textOnEndStr, textOnEnd, promptcol, infocol);
                if (textOnEndStr == "_fail_")
                {
                    return new List<int> {};
                }
                if (values.Count != numValues)
                {
                    Info(msg,msg2);
                    textOnEndStr = "_fail_";
                    return new List<int>{};
                }
                for (int i = 0; i < numValues; i++)
                {
                    if (values[i] < 0 || values[i] > intListMazes[i])
                    {
                        values = new List<int>();
                        Info(msg,msg2);
                        textOnEndStr = "_fail_";
                        return new List<int> {};
                    }
                }

            }
            return values;
        }

        public List<int> Prompt4NumsandText(int numValues, out string textOnEndStr, bool textOnEnd, Fmt.Col promptcol, Fmt.Col infocol)
        {
            string prompt = $"Enter CSV list of values";
            textOnEndStr = "";
            string msg2 = "";

            List<int> intList = new List<int>();
            int expectedNumVals = numValues;
            string msg = $"You need to enter {numValues} values separated by commas.";
            if (textOnEnd)
            {
                msg2 = " With text on end.";
                expectedNumVals++;
            }
            while (intList.Count != numValues)
            {
                string csv = Prompt4String(prompt, promptcol, infocol);
                List<int> temp = new List<int>();
                string[] parts = csv.Split(",");
                if (parts.Length != expectedNumVals)
                {
                    Info(msg,msg2);
                    textOnEndStr = "_fail_";
                    return new List<int> {};
                }
                string[] parts2 = parts;
                if (textOnEnd)
                {
                    textOnEndStr = parts.Last();
                    parts2 = parts.SkipLast(1).ToArray();
                }
                intList = new List<int>();
                foreach (string item in parts2)
                {
                    if (int.TryParse(item, out int number))
                    {
                        intList.Add(number);
                    }
                    else
                    {
                        Info(msg,msg2);
                        textOnEndStr = "_fail_";
                        return new List<int> {};
                    }
                }
                if (intList.Count != numValues)
                {
                    Info(msg, msg2);
                    textOnEndStr = "_fail_";
                    return new List<int> { };
                }
            }
            return intList;
        }
    }



}
