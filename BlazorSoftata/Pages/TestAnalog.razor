@page "/TestAnalog"


@using Softata;

<PageTitle>Softata Test Analog</PageTitle>

<h1>Softata Test Analog</h1>

<i><b>Softata:</b> A Firmata like C# library connecting to a RPi Pico W running Arduino.</i>

<p>This page tests the Analog input and PWM output pins of the RPi Pico W with a Button and LED.
Runs the analog test as per the Console app without user web page interaction but requires a potentiometer to control brightness of an LED.
</p>

@if (!@running)
{
<table>
    <tr>
        <td>IP Address:</td>
        <td><input type="text" value="@ipaddressStr" /></td>
    </tr>
    <tr>
        <td>Port:</td>
        <td><input type="text" value="@port" /></td>
    </tr>
    <tr>
        <td>Potentiometer Pin:</td>
            <td><input type="number" @bind-value="@POTENTIOMETER" /></td>
    </tr>
    <tr>
        <td>LED Pin:</td>
        <td><input type="number" @bind-value="@LED" /></td>
    </tr>
    <tr>
        <td>Running:</td>
        <td>@running</td>
    </tr>
</table>



    <h2>Setup</h2>

    <ul>
        <li>Connect a Potentiometer to pin @POTENTIOMETER</li>
        <li>Connect a LED to pin @LED</li>
    </ul>

    <button class="btn btn-primary" @onclick="Start">Run test</button>
}
else
{
    <h2>Rotate the potentiometer slowly to change the brightness of the LED.</h2>
    <ul>
        <li>Pot glows when &lt;512/1023</li>
        <li>LED glows when &gt;127/255</li>
    </ul>

    <table>
        <tr>
            <td width="150">Potentiometer:</td>
            <td rowspan="2">
                <div class="row">
                    <div class="lights">
                        <div class="red @(PotValue<512 ? "on" : "off")"></div>
                        <div class="green @(LEDValue>0x7f ? "on" : "off")"></div>
                    </div>
                </div>
            </td>
            <td>&nbsp;&nbsp;</td>
            <td>@PotValue</td>
        </tr>
        <tr>
            <td>LED:</td>
            <td>&nbsp;&nbsp;</td>
            <td>@LEDValue</td>
        </tr>
    </table>



    <button class="btn btn-primary" @onclick="Stop">Cancel</button>
}





@code {

    public class A2DandPWMValues
    {
        public int PotValue { get; set; } = 0;
        public byte PWMValue { get; set; } = 0;
    }

    // Set the same as Arduino:
    const int port = 4242;
    const string ipaddressStr = "192.168.0.13";
    bool running { get; set; } = false;

    Queue<A2DandPWMValues> queue = new Queue<A2DandPWMValues>();

    // Configure hardware pin connections thus:
    static int LED = 12;
    static byte POTENTIOMETER = 26;

    byte LEDValue = 0;
    int PotValue { get; set; } = 0;

    public System.Threading.WaitHandle Trigger { get; set; }


    protected override void OnInitialized()
    {
        queue = new Queue<A2DandPWMValues>();
        Trigger = new System.Threading.ManualResetEvent(false);
        var thread = new System.Threading.Thread(_ =>
        {
            Trigger.WaitOne();
            Run();
        });

        thread.Start();
    }

    private async Task Start()
    {
        queue = new Queue<A2DandPWMValues>();
        running = true;
        StateHasChanged();
        await Task.Delay(100);
        ((ManualResetEvent)Trigger).Set();
        while(running)
        {
            try{
                if (queue.TryDequeue(out A2DandPWMValues? _a2DandPWMValues))
                {
                    if (_a2DandPWMValues!=null)
                    {
                        PotValue = _a2DandPWMValues.PotValue;
                        LEDValue = _a2DandPWMValues.PWMValue;
                        StateHasChanged();  
                    } 
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            await Task.Delay(333);
        }
        await Task.Delay(333);
        SoftataLib.SendMessageCmd("End");
        await Task.Delay(333);
    }

    private void Stop()
    {
        running = false;
        StateHasChanged();
    }

    public void Run()
    {
        A2DandPWMValues a2DandPwmValues = new A2DandPWMValues();

        SoftataLib.Init(ipaddressStr, port);
        SoftataLib.SendMessageCmd("Begin");
        Thread.Sleep(333);

        // Note no pin setup needed for analog
        SoftataLib.Digital.SetPinMode(LED, SoftataLib.PinMode.DigitalOutput);

        for (int i = 0; i < 60; i++)
        {
            a2DandPwmValues.PotValue = SoftataLib.Analog.AnalogRead(POTENTIOMETER);
            if (a2DandPwmValues.PotValue != int.MaxValue)
            {
                Console.WriteLine($"AnalogRead({POTENTIOMETER}) = {a2DandPwmValues.PotValue}");
                a2DandPwmValues.PWMValue = (byte)(a2DandPwmValues.PotValue >> 2);
                if (a2DandPwmValues.PotValue > 1023)
                    a2DandPwmValues.PWMValue = 255;
                SoftataLib.PWM.SetPWM(LED, (byte)(a2DandPwmValues.PWMValue));
                queue.Enqueue(a2DandPwmValues);
            }
            else
                Console.WriteLine($"AnalogRead({POTENTIOMETER}) failed");
            Console.WriteLine();
            Thread.Sleep(333);
        }
        running = false;
        Thread.Sleep(333);
    }

}

