@page "/"
@page "/TestDigital"


@using Softata;

<PageTitle>Test Digital</PageTitle>

<h1>Test Digital</h1>

<i><b>Softata:</b> A Firmata like C# library connecting to a RPi Pico W running Arduino.</i>

<p>This page tests the digital input and output pins of the RPi Pico W with a Button and LED.
Runs the digital test as per teh Console app without user web page interaction but requires a button press to toggle the LED.
</p>

@if (!@running)
{
<table>
    <tr>
        <td>IP Address:</td>
        <td><input type="text" value="@ipaddressStr" /></td>
    </tr>
    <tr>
        <td>Port:</td>
        <td><input type="text" value="@port" /></td>
    </tr>
    <tr>
        <td>Button Pin:</td>
        <td><input type="number" @bind-value="@BUTTON"   /></td>
    </tr>
    <tr>
        <td>LED Pin:</td>
        <td><input type="number" @bind-value="@LED" /></td>
    </tr>
    <tr>
        <td>Running:</td>
        <td>@running</td>
    </tr>
</table>



    <h2>Setup</h2>

    <ul>
        <li>Connect a button to pin @BUTTON</li>
        <li>Connect a LED to pin @LED</li>
    </ul>

    <button class="btn btn-primary" @onclick="Start">Run test</button>
}
else
{
    <h2>Press hardware button to toggle LED.</h2>
    <h3>Hold until LED changes state = Button here is HIGH</h3>

    <table>
        <tr>
            <td>Button:</td>
            <td>@Buttonstate</td>
        </tr>
        <tr>
            <td>LED:</td>
            <td>@LEDstate</td>
        </tr>
    </table>

    <button class="btn btn-primary" @onclick="Stop">Cancel</button>
}





@code {

    public class LEDandButtonStates
    {
        public SoftataLib.PinState LEDstate { get; set; } = SoftataLib.PinState.LOW;
        public SoftataLib.PinState Buttonstate { get; set; } = SoftataLib.PinState.LOW;
    }

    // Set the same as Arduino:
    const int port = 4242;
    const string ipaddressStr = "192.168.0.13";
    bool running { get; set; } = false;

    Queue<LEDandButtonStates> queue = new Queue<LEDandButtonStates>();

    // Configure hardware pin connections thus:
    static int LED = 12;
    static int BUTTON = 13;
    static byte POTENTIOMETER = 26;

    SoftataLib.PinState LEDstate = SoftataLib.PinState.LOW;
    SoftataLib.PinState Buttonstate { get; set; } = SoftataLib.PinState.LOW;

    public System.Threading.WaitHandle Trigger { get; set; }


    protected override void OnInitialized()
    {
        queue = new Queue<LEDandButtonStates>();
        Trigger = new System.Threading.ManualResetEvent(false);
        var thread = new System.Threading.Thread(_ =>
        {
            Trigger.WaitOne();
            Run();
        });

        thread.Start();
    }

    private async Task Start()
    {
        queue = new Queue<LEDandButtonStates>();
        running = true;
        StateHasChanged();
        await Task.Delay(100);
        ((ManualResetEvent)Trigger).Set();
        while(running)
        {
            if (queue.TryDequeue(out LEDandButtonStates states))
            {

                Buttonstate = states.Buttonstate;
                LEDstate = states.LEDstate;
                StateHasChanged();  
            }
            await Task.Delay(333);
        }
    }

    private async Task Stop()
    {
        running = false;
        StateHasChanged();
        SoftataLib.SendMessageCmd("End");
        await Task.Delay(333);
    }


    private  void Run()
    {
        LEDandButtonStates states = new LEDandButtonStates();


        SoftataLib.Init(ipaddressStr, port);
        SoftataLib.SendMessageCmd("Begin");
        Thread.Sleep(333);

        SoftataLib.Digital.SetPinMode((byte)BUTTON, SoftataLib.PinMode.DigitalInput);
        SoftataLib.Digital.SetPinMode((byte)LED, SoftataLib.PinMode.DigitalOutput);

        SoftataLib.PinState state = SoftataLib.PinState.HIGH;
        SoftataLib.PinState buttonState = SoftataLib.PinState.LOW;
        SoftataLib.Digital.SetPinState(LED, state);
        states.Buttonstate = buttonState;
        states.LEDstate = state;
        queue.Enqueue(states); ;

        for (int i = 0; i < 6; i++)
        {
            if (!running) return;
            while (!SoftataLib.Digital.GetPinState(BUTTON))
            {
                Thread.Sleep(333);
                if (!running) return;
            };

            states.Buttonstate = SoftataLib.PinState.HIGH;
            state = (state == SoftataLib.PinState.HIGH) ? SoftataLib.PinState.LOW : SoftataLib.PinState.HIGH;
            SoftataLib.Digital.SetPinState(LED, state);
            states.LEDstate = state;
            queue.Enqueue(states);

            while (SoftataLib.Digital.GetPinState(BUTTON))
            {
                Thread.Sleep(333);
                if (!running) return;
            }
            states.Buttonstate = SoftataLib.PinState.LOW;
            queue.Enqueue(states);
        }

        SoftataLib.SendMessageCmd("End");
        Thread.Sleep(333);

        running= false;
        //StateHasChanged();
    }

}

